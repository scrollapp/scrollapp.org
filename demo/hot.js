"use strict";
class Hot extends (() => Object)() {
    provider;
    /** */
    static elements = ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "dir", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "font", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "i", "iframe", "img", "input", "ins", "kbd", "label", "legend", "li", "link", "main", "map", "mark", "marquee", "menu", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "slot", "small", "source", "span", "strong", "sub", "summary", "sup", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "video", "wbr",
    ];
    /**
     *
     */
    constructor(provider = {}) {
        super();
        this.provider = provider;
        for (const name of Hot.elements) {
            Object.defineProperty(this, name, {
                value: (...params) => {
                    const element = provider.createElement?.(name) ||
                        document.createElement(name);
                    return this.apply(element, params);
                }
            });
        }
        if (this.provider.createText) {
            const fn = this.provider.createText;
            this.text = (...strings) => fn(strings.join(""));
        }
    }
    text(...strings) {
        return new Text(strings.join(""));
    }
    get(...elements) {
        return (...params) => {
            for (const e of elements) {
                if (Hot.is.element(e) || Hot.is.shadow(e))
                    this.apply(e, params);
                else if (Hot.is.element(e.head))
                    this.apply(e.head, params);
            }
            return elements[0] || null;
        };
    }
    /** */
    static is = Object.freeze({
        node(n) {
            const type = n?.nodeType;
            return typeof type === "number" && type > 0 && type < 13;
        },
        element(e) {
            return !!e && e.nodeType === 1;
        },
        text(t) {
            return !!t && t.nodeType === 3;
        },
        comment(c) {
            return !!c && c.nodeType === 8;
        },
        shadow(c) {
            return !!c && c.nodeType === 11 && Hot.is.element(c.host);
        },
    });
    /**
     *
     */
    shadow(...params) {
        return e => {
            const shadow = e.shadowRoot || e.attachShadow({ mode: "open" });
            this.apply(shadow, params);
        };
    }
    /** */
    apply(e, params) {
        if (this.cssPropertySet === null) {
            const propertyNames = [];
            for (const key in document.documentElement.style)
                propertyNames.push(key);
            this.cssPropertySet = new Set(propertyNames);
        }
        // CAUTION: This code is *very* performance sensitive. It uses
        // constructor checks instead of instanceof and typeof in an effort
        // to squeeze out maximum performance. Be careful of changing
        // this code without  having full knowledge of what you're doing.
        for (let i = -1, length = params.length; ++i < length;) {
            const param = params[i];
            if (!param)
                continue;
            if (Hot.is.node(param)) {
                e.append(param);
            }
            else if (Array.isArray(param)) {
                this.apply(e, param);
            }
            else
                switch (param.constructor) {
                    case Hot.Event:
                        {
                            if (e) {
                                const he = param;
                                if (he.target)
                                    he.host = e;
                                else {
                                    e.addEventListener(he.type, he.handler, he.options);
                                    if (he.type === "connected" || he.type === "rendered")
                                        this.awaitingConnection.push([e, he.type === "rendered"]);
                                }
                            }
                        }
                        break;
                    case String:
                        {
                            // Note that ShadowRoots cannot accept string parameters.
                            const cssClass = param;
                            e.classList.add(cssClass);
                            if (cssClass.indexOf("--hot--" /* Hot.GeneratedClassPrefix.value */) === 0) {
                                const maybeShadow = e.getRootNode();
                                if (Hot.is.shadow(maybeShadow))
                                    this.toShadow(maybeShadow, cssClass);
                            }
                        }
                        break;
                    case Object:
                        {
                            const el = e;
                            for (const [name, value] of Object.entries(param)) {
                                // JavaScript numbers that are specified in the width and height properties
                                // are injected as HTML attributes rather than assigned as CSS properties.
                                if (value &&
                                    (name === "width" || name === "height") &&
                                    typeof value === "number") {
                                    e.setAttribute(name, value.toString());
                                }
                                else if (name === "data") {
                                    for (const [attrName, attrValue] of Object.entries(value || {}))
                                        e.setAttribute("data-" + attrName, String(attrValue));
                                }
                                // Width, height, and background properties are special cased.
                                // They are interpreted as CSS properties rather than HTML attributes.
                                else if (name in e &&
                                    name !== "background" &&
                                    name !== "width" &&
                                    name !== "height") {
                                    // Some attributes can't be assigned with keyed property access,
                                    // at least in Chromium-based browsers (HTMLVideoElement.muted).
                                    // So here, we're assigning both the JavaScript property and calling
                                    // the setAttribute() function to ensure that the attribute always 
                                    // shows up in the Element.getAttributes() list.
                                    el[name] = value;
                                    e.setAttribute(name, value);
                                }
                                else if (this.cssPropertySet.has(name)) {
                                    this.setProperty(el, name, value);
                                }
                            }
                        }
                        break;
                    case Function:
                        {
                            if (Hot.is.element(e) || Hot.is.shadow(e)) {
                                const fn = param;
                                const subParams = fn(e);
                                if (subParams)
                                    this.apply(e, Array.isArray(subParams) ? subParams : [subParams]);
                            }
                        }
                    default:
                        {
                            // Ugly, but high-performance way to check if the param is a Hat
                            // (meaning, an object with a .head HTMLElement property) coming 
                            // from the Hat library.
                            if (!!param.head && param.head.ELEMENT_NODE === 1) {
                                this.apply(e, [param.head]);
                            }
                            else if (typeof param === "function" && param.constructor.name === "AsyncFunction") {
                                this.apply(e, param(e));
                            }
                        }
                }
        }
        return e;
    }
    cssPropertySet = null;
    //# Event Related
    /** */
    static Event = class Event {
        target;
        type;
        handler;
        options;
        /** */
        constructor(target, type, handler, options = {}) {
            this.target = target;
            this.type = type;
            this.handler = handler;
            this.options = options;
        }
        /**
         * Stores the element that "hosts" the event, which is not necessarily
         * the target event. When the host element is removed from the DOM,
         * the event handler is removed.
         */
        host = null;
    };
    /** */
    on(...args) {
        const target = typeof args[0] === "string" ? null : args[0];
        const type = typeof args[0] === "string" ? args[0] : args[1];
        const handler = typeof args[1] === "function" ? args[1] : args[2];
        const last = args.pop();
        const options = typeof last === "function" ? {} : last;
        if (type === "connected" || type === "disconnected") {
            this.maybeInstallRootObserver();
            options.once = true;
        }
        const hev = new Hot.Event(target, type, handler, options);
        // If the event has a defined target, then add the event listener right away,
        // and the apply() function will assign any host element, if present.
        if (target) {
            let handler;
            target.addEventListener(hev.type, handler = (ev) => {
                if (hev.host?.isConnected !== false)
                    hev.handler(ev);
                else
                    target.removeEventListener(hev.type, handler);
            }, options);
        }
        return hev;
    }
    //# Connection Events
    /** */
    maybeInstallRootObserver() {
        if (this.hasInstalledRootObserver)
            return;
        this.hasInstalledRootObserver = true;
        new MutationObserver(() => {
            const invokations = [];
            for (let i = this.awaitingConnection.length; i-- > 0;) {
                const tuple = this.awaitingConnection[i];
                if (!tuple[0].isConnected)
                    continue;
                this.awaitingConnection.splice(i, 1);
                invokations.push(tuple);
            }
            // Run the callbacks in a separate pass, to deal with the fact that
            // there could be multiple awaiters watching the same element,
            // but also to handle the fact the callback functions could modify
            // the awaiting list.
            for (const [element, defer] of invokations) {
                const event = new Event("connected", {
                    bubbles: true,
                    cancelable: true,
                });
                if (defer)
                    setTimeout(() => element.dispatchEvent(event), 1);
                else
                    element.dispatchEvent(event);
            }
        }).observe(document.body, { childList: true, subtree: true });
    }
    hasInstalledRootObserver = false;
    awaitingConnection = [];
    style(...args) {
        const element = this.provider.createElement?.("style") ||
            document.createElement("style");
        element.attach = function (n) {
            const root = n ? n.getRootNode() : document;
            const container = root instanceof Document ? root.head : root;
            container.appendChild(element);
            return element;
        };
        if (args.length === 0)
            return element;
        if (typeof args[0] !== "string")
            this.get(element)(args.shift());
        if (args.every(a => Hot.is.text(a))) {
            element.append(...args);
            return element;
        }
        const cssText = [];
        // Creates a fake CSS rule, whose only purpose is to capture the calls
        // to setProperty(), and forward the string contents to the cssText array,
        // so that a string rule can be composed.
        const fakeRule = {
            style: {
                setProperty(name, value, important) {
                    cssText.push(name + ": " + value + (important ? " !" + important : "") + ";");
                }
            }
        };
        for (const group of this.createCssRuleGroups(args)) {
            cssText.push(group.selector, "{");
            for (const stylesObject of group.styles)
                for (let [n, v] of Object.entries(stylesObject))
                    if (typeof v === "string" || (typeof v === "number" && v === v))
                        this.setProperty(fakeRule, n, v, group.selector);
            cssText.push("}");
        }
        element.append(new Text(cssText.join("")));
        return element;
    }
    /**
     * Creates a series of CSS rules internally, and returns a class that
     * can be applied to HTML elements in order to apply the rules to
     * them.
     */
    css(...components) {
        const styleElement = this.getScopedStyleElement(document);
        const cssJsonText = JSON.stringify(components);
        components = JSON.parse(cssJsonText);
        const cssHashClass = "--hot--" /* Hot.GeneratedClassPrefix.value */ + this.hash(cssJsonText);
        this.applyCssToScope(styleElement, cssHashClass, components);
        return cssHashClass;
    }
    /**
     * Copies the rules that are connected to the specified CSS class
     * (which is expected to be a hash of CSS rules) so that they are
     * visible within the specified ShadowRoot.
     */
    toShadow(shadow, cssHashClass) {
        const styleElement = this.getScopedStyleElement(shadow);
        const cssParams = Hot.ruleData.get(styleElement)?.get(cssHashClass);
        if (cssParams)
            this.applyCssToScope(styleElement, cssHashClass, cssParams);
    }
    /** */
    applyCssToScope(styleElement, cssHashClass, components) {
        // Don't create another CSS rule if there is already one
        // that exists within the provided <style> element with
        // the provided rule hash.
        if (Hot.ruleData.get(styleElement)?.get(cssHashClass))
            return;
        const sheet = styleElement.sheet;
        const groups = this.createCssRuleGroups(components);
        for (const group of groups) {
            const selectorParts = group.selector.split("&");
            let selector = group.selector;
            if (selector.startsWith("*")) {
                selector = "." + cssHashClass + " " + selector;
            }
            else if (selector !== ":root") {
                [selector] = this.trimImportant(selectorParts.length === 1 ?
                    "." + cssHashClass + group.selector :
                    selectorParts.join("." + cssHashClass));
            }
            const idx = sheet.insertRule(selector + "{}");
            const cssRule = sheet.cssRules.item(idx);
            for (const stylesObject of group.styles)
                for (let [n, v] of Object.entries(stylesObject))
                    if (typeof v === "string" || (typeof v === "number" && v === v))
                        this.setProperty(cssRule, n, v, group.selector);
        }
        let hashSet = Hot.ruleData.get(styleElement);
        if (hashSet)
            hashSet.set(cssHashClass, components);
        else
            Hot.ruleData.set(styleElement, hashSet = new Map([[cssHashClass, components]]));
    }
    /**
     * Stores a WeakMap of Sets of the hashes of the contents of each CSS rule
     * that has been applied to a given generated <style> element.
     */
    static ruleData = new WeakMap();
    /** */
    createCssRuleGroups(components) {
        const groups = [{ selector: "", styles: [] }];
        for (let i = -1; ++i < components.length;) {
            const cur = components[i];
            const last = i > 0 && components[i - 1];
            if (typeof cur === "string" && typeof last === "object")
                groups.push({ selector: "", styles: [] });
            const group = groups[groups.length - 1];
            if (typeof cur === "string")
                group.selector += cur;
            else
                group.styles.push(cur);
        }
        return groups;
    }
    /** */
    setProperty(styleable, property, value, selectorOfContainingRule = "") {
        if (typeof value === "number")
            value ||= 0;
        const [, selectorImportant] = this.trimImportant(selectorOfContainingRule);
        const p = this.toCssDashCase(property);
        if (!Array.isArray(value)) {
            const [v, valueImportant] = this.trimImportant(String(value));
            styleable.style.setProperty(p, v, selectorImportant || valueImportant);
        }
        else
            for (const item of value) {
                const [v, valueImportant] = this.trimImportant(String(item));
                styleable.style.setProperty(p, v, selectorImportant || valueImportant);
            }
    }
    /** */
    toCssDashCase(p) {
        p = p.replace(/[A-Z]/g, char => "-" + char.toLowerCase());
        if (p.slice(0, 6) === "webkit" || p.slice(0, 3) === "moz" || p.slice(0, 2) === "ms")
            p = "-" + p;
        return p;
    }
    /** */
    trimImportant(str) {
        if (str.slice(-1) === "!")
            str = str.slice(0, -1);
        else if (str.slice(-10) === "!important")
            str = str.slice(0, -10);
        else
            return [str, undefined];
        return [str, "important"];
    }
    /**
     * Returns the CSSStyleSheet that stores the CSS rules that should
     * target the specified element. If the element is within a shadow root,
     * the sheet that is returned is the one that is contained within this
     * shadow root.
     */
    getScopedStyleElement(applyTarget) {
        let container = (() => {
            if (Hot.is.shadow(applyTarget))
                return applyTarget;
            const root = applyTarget.getRootNode();
            return root instanceof Document ?
                root.head :
                root;
        })();
        const cls = "hot-style-sheet";
        const children = Array.from(container.children);
        const existing = children.find(e => e.classList.contains(cls));
        if (existing instanceof HTMLStyleElement)
            return existing;
        const styleElement = document.createElement("style");
        styleElement.className = cls;
        container.append(styleElement);
        return styleElement;
    }
    /**
     * Hash calculation function adapted from:
     * https://stackoverflow.com/a/52171480/133737
     */
    hash(value, seed = 0) {
        const val = value.toString();
        let h1 = 0xDEADBEEF ^ seed;
        let h2 = 0X41C6CE57 ^ seed;
        for (let i = 0; i < val.length; i++) {
            let ch = val.charCodeAt(i);
            h1 = Math.imul(h1 ^ ch, 2654435761);
            h2 = Math.imul(h2 ^ ch, 1597334677);
        }
        h1 = Math.imul(h1 ^ h1 >>> 16, 2246822507) ^ Math.imul(h2 ^ h2 >>> 13, 3266489909);
        h2 = Math.imul(h2 ^ h2 >>> 16, 2246822507) ^ Math.imul(h1 ^ h1 >>> 13, 3266489909);
        return 4294967296 * (2097151 & h2) + (h1 >>> 0);
    }
}
//@ts-ignore
if (typeof module === "object")
    Object.assign(module.exports, { Hot: Hot });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG90LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vSG90LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUE0SEEsTUFBTSxHQUFJLFNBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxNQUE0QixDQUFDLEVBQUU7SUFTMUI7SUFQN0IsTUFBTTtJQUNOLE1BQU0sQ0FBVSxRQUFRLEdBQUcsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsVUFB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QUFVLENBQUMsQ0FBQztZQUNwQyxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1NBQ3BDO1FBRUQsRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUUsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNuRixFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRSxVQUFVLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ25GLE9BQU8sVUFBVSxHQUFHLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ2pELENBQUM7O0FBOGhCRixZQUFZO0FBQ1osSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRO0lBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogXG4gKi9cbmludGVyZmFjZSBIb3RFbGVtZW50c1xue1xuXHRhKC4uLnBhcmFtczogSG90LlBhcmFtPEhvdC5BbmNob3JFbGVtZW50QXR0cmlidXRlPltdKTogSFRNTEFuY2hvckVsZW1lbnQ7XG5cdGFiYnIoLi4ucGFyYW1zOiBIb3QuUGFyYW1bXSk6IEhUTUxFbGVtZW50O1xuXHRhZGRyZXNzKC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MRWxlbWVudDtcblx0YXJlYSguLi5wYXJhbXM6IEhvdC5QYXJhbVtdKTogSFRNTEFyZWFFbGVtZW50O1xuXHRhcnRpY2xlKC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MRWxlbWVudDtcblx0YXNpZGUoLi4ucGFyYW1zOiBIb3QuUGFyYW1bXSk6IEhUTUxFbGVtZW50O1xuXHRhdWRpbyguLi5wYXJhbXM6IEhvdC5QYXJhbVtdKTogSFRNTEF1ZGlvRWxlbWVudDtcblx0YiguLi5wYXJhbXM6IEhvdC5QYXJhbVtdKTogSFRNTEVsZW1lbnQ7XG5cdGJhc2UoLi4ucGFyYW1zOiBIb3QuUGFyYW08SG90LkJhc2VFbGVtZW50QXR0cmlidXRlPltdKTogSFRNTEJhc2VFbGVtZW50O1xuXHRiZGkoLi4ucGFyYW1zOiBIb3QuUGFyYW1bXSk6IEhUTUxFbGVtZW50O1xuXHRiZG8oLi4ucGFyYW1zOiBIb3QuUGFyYW1bXSk6IEhUTUxFbGVtZW50O1xuXHRibG9ja3F1b3RlKC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MUXVvdGVFbGVtZW50O1xuXHRib2R5KC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MQm9keUVsZW1lbnQ7XG5cdGJyKC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MQlJFbGVtZW50O1xuXHRidXR0b24oLi4ucGFyYW1zOiBIb3QuUGFyYW1bXSk6IEhUTUxCdXR0b25FbGVtZW50O1xuXHRjYW52YXMoLi4ucGFyYW1zOiBIb3QuUGFyYW1bXSk6IEhUTUxDYW52YXNFbGVtZW50O1xuXHRjYXB0aW9uKC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MVGFibGVDYXB0aW9uRWxlbWVudDtcblx0Y2l0ZSguLi5wYXJhbXM6IEhvdC5QYXJhbVtdKTogSFRNTEVsZW1lbnQ7XG5cdGNvZGUoLi4ucGFyYW1zOiBIb3QuUGFyYW1bXSk6IEhUTUxFbGVtZW50O1xuXHRjb2woLi4ucGFyYW1zOiBIb3QuUGFyYW1bXSk6IEhUTUxUYWJsZUNvbEVsZW1lbnQ7XG5cdGNvbGdyb3VwKC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MVGFibGVDb2xFbGVtZW50O1xuXHRkYXRhKC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MRGF0YUVsZW1lbnQ7XG5cdGRhdGFsaXN0KC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MRGF0YUxpc3RFbGVtZW50O1xuXHRkZCguLi5wYXJhbXM6IEhvdC5QYXJhbVtdKTogSFRNTEVsZW1lbnQ7XG5cdGRlbCguLi5wYXJhbXM6IEhvdC5QYXJhbVtdKTogSFRNTE1vZEVsZW1lbnQ7XG5cdGRldGFpbHMoLi4ucGFyYW1zOiBIb3QuUGFyYW1bXSk6IEhUTUxEZXRhaWxzRWxlbWVudDtcblx0ZGZuKC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MRWxlbWVudDtcblx0ZGlhbG9nKC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MRGlhbG9nRWxlbWVudDtcblx0ZGlyKC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MRGlyZWN0b3J5RWxlbWVudDtcblx0ZGl2KC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MRGl2RWxlbWVudDtcblx0ZGwoLi4ucGFyYW1zOiBIb3QuUGFyYW1bXSk6IEhUTUxETGlzdEVsZW1lbnQ7XG5cdGR0KC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MRWxlbWVudDtcblx0ZW0oLi4ucGFyYW1zOiBIb3QuUGFyYW1bXSk6IEhUTUxFbGVtZW50O1xuXHRlbWJlZCguLi5wYXJhbXM6IEhvdC5QYXJhbVtdKTogSFRNTEVtYmVkRWxlbWVudDtcblx0ZmllbGRzZXQoLi4ucGFyYW1zOiBIb3QuUGFyYW1bXSk6IEhUTUxGaWVsZFNldEVsZW1lbnQ7XG5cdGZpZ2NhcHRpb24oLi4ucGFyYW1zOiBIb3QuUGFyYW1bXSk6IEhUTUxFbGVtZW50O1xuXHRmaWd1cmUoLi4ucGFyYW1zOiBIb3QuUGFyYW1bXSk6IEhUTUxFbGVtZW50O1xuXHRmb250KC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MRm9udEVsZW1lbnQ7XG5cdGZvb3RlciguLi5wYXJhbXM6IEhvdC5QYXJhbVtdKTogSFRNTEVsZW1lbnQ7XG5cdGZvcm0oLi4ucGFyYW1zOiBIb3QuUGFyYW1bXSk6IEhUTUxGb3JtRWxlbWVudDtcblx0ZnJhbWUoLi4ucGFyYW1zOiBIb3QuUGFyYW1bXSk6IEhUTUxGcmFtZUVsZW1lbnQ7XG5cdGZyYW1lc2V0KC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MRnJhbWVTZXRFbGVtZW50O1xuXHRoMSguLi5wYXJhbXM6IEhvdC5QYXJhbVtdKTogSFRNTEhlYWRpbmdFbGVtZW50O1xuXHRoMiguLi5wYXJhbXM6IEhvdC5QYXJhbVtdKTogSFRNTEhlYWRpbmdFbGVtZW50O1xuXHRoMyguLi5wYXJhbXM6IEhvdC5QYXJhbVtdKTogSFRNTEhlYWRpbmdFbGVtZW50O1xuXHRoNCguLi5wYXJhbXM6IEhvdC5QYXJhbVtdKTogSFRNTEhlYWRpbmdFbGVtZW50O1xuXHRoNSguLi5wYXJhbXM6IEhvdC5QYXJhbVtdKTogSFRNTEhlYWRpbmdFbGVtZW50O1xuXHRoNiguLi5wYXJhbXM6IEhvdC5QYXJhbVtdKTogSFRNTEhlYWRpbmdFbGVtZW50O1xuXHRoZWFkKC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MSGVhZEVsZW1lbnQ7XG5cdGhlYWRlciguLi5wYXJhbXM6IEhvdC5QYXJhbVtdKTogSFRNTEVsZW1lbnQ7XG5cdGhncm91cCguLi5wYXJhbXM6IEhvdC5QYXJhbVtdKTogSFRNTEVsZW1lbnQ7XG5cdGhyKC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MSFJFbGVtZW50O1xuXHRpKC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MRWxlbWVudDtcblx0aWZyYW1lKC4uLnBhcmFtczogSG90LlBhcmFtPEhvdC5GcmFtZUVsZW1lbnRBdHRyaWJ1dGU+W10pOiBIVE1MSUZyYW1lRWxlbWVudDtcblx0aW1nKC4uLnBhcmFtczogSG90LlBhcmFtPEhvdC5JbWFnZUVsZW1lbnRBdHRyaWJ1dGU+W10pOiBIVE1MSW1hZ2VFbGVtZW50O1xuXHRpbnB1dCguLi5wYXJhbXM6IEhvdC5QYXJhbTxIb3QuSW5wdXRFbGVtZW50QXR0cmlidXRlPltdKTogSFRNTElucHV0RWxlbWVudDtcblx0aW5zKC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MTW9kRWxlbWVudDtcblx0a2JkKC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MRWxlbWVudDtcblx0bGFiZWwoLi4ucGFyYW1zOiBIb3QuUGFyYW1bXSk6IEhUTUxMYWJlbEVsZW1lbnQ7XG5cdGxlZ2VuZCguLi5wYXJhbXM6IEhvdC5QYXJhbVtdKTogSFRNTExlZ2VuZEVsZW1lbnQ7XG5cdGxpKC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MTElFbGVtZW50O1xuXHRsaW5rKC4uLnBhcmFtczogSG90LlBhcmFtPEhvdC5MaW5rRWxlbWVudEF0dHJpYnV0ZT5bXSk6IEhUTUxMaW5rRWxlbWVudDtcblx0bWFpbiguLi5wYXJhbXM6IEhvdC5QYXJhbVtdKTogSFRNTEVsZW1lbnQ7XG5cdG1hcCguLi5wYXJhbXM6IEhvdC5QYXJhbVtdKTogSFRNTE1hcEVsZW1lbnQ7XG5cdG1hcmsoLi4ucGFyYW1zOiBIb3QuUGFyYW1bXSk6IEhUTUxFbGVtZW50O1xuXHRtYXJxdWVlKC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MTWFycXVlZUVsZW1lbnQ7XG5cdG1lbnUoLi4ucGFyYW1zOiBIb3QuUGFyYW1bXSk6IEhUTUxNZW51RWxlbWVudDtcblx0bWV0YSguLi5wYXJhbXM6IEhvdC5QYXJhbTxIb3QuTWV0YUVsZW1lbnRBdHRyaWJ1dGU+W10pOiBIVE1MTWV0YUVsZW1lbnQ7XG5cdG1ldGVyKC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MTWV0ZXJFbGVtZW50O1xuXHRuYXYoLi4ucGFyYW1zOiBIb3QuUGFyYW1bXSk6IEhUTUxFbGVtZW50O1xuXHRub3NjcmlwdCguLi5wYXJhbXM6IEhvdC5QYXJhbVtdKTogSFRNTEVsZW1lbnQ7XG5cdG9iamVjdCguLi5wYXJhbXM6IEhvdC5QYXJhbVtdKTogSFRNTE9iamVjdEVsZW1lbnQ7XG5cdG9sKC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MT0xpc3RFbGVtZW50O1xuXHRvcHRncm91cCguLi5wYXJhbXM6IEhvdC5QYXJhbVtdKTogSFRNTE9wdEdyb3VwRWxlbWVudDtcblx0b3B0aW9uKC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MT3B0aW9uRWxlbWVudDtcblx0b3V0cHV0KC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MT3V0cHV0RWxlbWVudDtcblx0cCguLi5wYXJhbXM6IEhvdC5QYXJhbVtdKTogSFRNTFBhcmFncmFwaEVsZW1lbnQ7XG5cdHBhcmFtKC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MUGFyYW1FbGVtZW50O1xuXHRwaWN0dXJlKC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MUGljdHVyZUVsZW1lbnQ7XG5cdHByZSguLi5wYXJhbXM6IEhvdC5QYXJhbVtdKTogSFRNTFByZUVsZW1lbnQ7XG5cdHByb2dyZXNzKC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MUHJvZ3Jlc3NFbGVtZW50O1xuXHRxKC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MUXVvdGVFbGVtZW50O1xuXHRycCguLi5wYXJhbXM6IEhvdC5QYXJhbVtdKTogSFRNTEVsZW1lbnQ7XG5cdHJ0KC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MRWxlbWVudDtcblx0cnVieSguLi5wYXJhbXM6IEhvdC5QYXJhbVtdKTogSFRNTEVsZW1lbnQ7XG5cdHMoLi4ucGFyYW1zOiBIb3QuUGFyYW1bXSk6IEhUTUxFbGVtZW50O1xuXHRzYW1wKC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MRWxlbWVudDtcblx0c2NyaXB0KC4uLnBhcmFtczogSG90LlBhcmFtPEhvdC5TY3JpcHRFbGVtZW50QXR0cmlidXRlPltdKTogSFRNTFNjcmlwdEVsZW1lbnQ7XG5cdHNlY3Rpb24oLi4ucGFyYW1zOiBIb3QuUGFyYW1bXSk6IEhUTUxFbGVtZW50O1xuXHRzZWxlY3QoLi4ucGFyYW1zOiBIb3QuUGFyYW1bXSk6IEhUTUxTZWxlY3RFbGVtZW50O1xuXHRzbG90KC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MU2xvdEVsZW1lbnQ7XG5cdHNtYWxsKC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MRWxlbWVudDtcblx0c291cmNlKC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MU291cmNlRWxlbWVudDtcblx0c3BhbiguLi5wYXJhbXM6IEhvdC5QYXJhbVtdKTogSFRNTFNwYW5FbGVtZW50O1xuXHRzdHJvbmcoLi4ucGFyYW1zOiBIb3QuUGFyYW1bXSk6IEhUTUxFbGVtZW50O1xuXHRzdWIoLi4ucGFyYW1zOiBIb3QuUGFyYW1bXSk6IEhUTUxFbGVtZW50O1xuXHRzdW1tYXJ5KC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MRWxlbWVudDtcblx0c3VwKC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MRWxlbWVudDtcblx0dGFibGUoLi4ucGFyYW1zOiBIb3QuUGFyYW1bXSk6IEhUTUxUYWJsZUVsZW1lbnQ7XG5cdHRib2R5KC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MVGFibGVTZWN0aW9uRWxlbWVudDtcblx0dGQoLi4ucGFyYW1zOiBIb3QuUGFyYW1bXSk6IEhUTUxUYWJsZUNlbGxFbGVtZW50O1xuXHR0ZW1wbGF0ZSguLi5wYXJhbXM6IEhvdC5QYXJhbVtdKTogSFRNTFRlbXBsYXRlRWxlbWVudDtcblx0dGV4dGFyZWEoLi4ucGFyYW1zOiBIb3QuUGFyYW1bXSk6IEhUTUxUZXh0QXJlYUVsZW1lbnQ7XG5cdHRmb290KC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MVGFibGVTZWN0aW9uRWxlbWVudDtcblx0dGgoLi4ucGFyYW1zOiBIb3QuUGFyYW1bXSk6IEhUTUxUYWJsZUNlbGxFbGVtZW50O1xuXHR0aGVhZCguLi5wYXJhbXM6IEhvdC5QYXJhbVtdKTogSFRNTFRhYmxlU2VjdGlvbkVsZW1lbnQ7XG5cdHRpbWUoLi4ucGFyYW1zOiBIb3QuUGFyYW1bXSk6IEhUTUxUaW1lRWxlbWVudDtcblx0dGl0bGUoLi4ucGFyYW1zOiBIb3QuUGFyYW1bXSk6IEhUTUxUaXRsZUVsZW1lbnQ7XG5cdHRyKC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MVGFibGVSb3dFbGVtZW50O1xuXHR0cmFjayguLi5wYXJhbXM6IEhvdC5QYXJhbVtdKTogSFRNTFRyYWNrRWxlbWVudDtcblx0dSguLi5wYXJhbXM6IEhvdC5QYXJhbVtdKTogSFRNTEVsZW1lbnQ7XG5cdHVsKC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MVUxpc3RFbGVtZW50O1xuXHR2aWRlbyguLi5wYXJhbXM6IEhvdC5QYXJhbTxIb3QuVmlkZW9FbGVtZW50QXR0cmlidXRlPltdKTogSFRNTFZpZGVvRWxlbWVudDtcblx0d2JyKC4uLnBhcmFtczogSG90LlBhcmFtW10pOiBIVE1MRWxlbWVudDtcblx0XG5cdG5ldygpOiBIb3RFbGVtZW50cztcbn1cblxuY2xhc3MgSG90IGV4dGVuZHMgKCgpID0+IE9iamVjdCBhcyBhbnkgYXMgSG90RWxlbWVudHMpKClcbntcblx0LyoqICovXG5cdHN0YXRpYyByZWFkb25seSBlbGVtZW50cyA9IFtcImFcIiwgXCJhYmJyXCIsIFwiYWRkcmVzc1wiLCBcImFyZWFcIiwgXCJhcnRpY2xlXCIsIFwiYXNpZGVcIiwgXCJhdWRpb1wiLCBcImJcIiwgXCJiYXNlXCIsIFwiYmRpXCIsIFwiYmRvXCIsIFwiYmxvY2txdW90ZVwiLCBcImJvZHlcIiwgXCJiclwiLCBcImJ1dHRvblwiLCBcImNhbnZhc1wiLCBcImNhcHRpb25cIiwgXCJjaXRlXCIsIFwiY29kZVwiLCBcImNvbFwiLCBcImNvbGdyb3VwXCIsIFwiZGF0YVwiLCBcImRhdGFsaXN0XCIsIFwiZGRcIiwgXCJkZWxcIiwgXCJkZXRhaWxzXCIsIFwiZGZuXCIsIFwiZGlhbG9nXCIsIFwiZGlyXCIsIFwiZGl2XCIsIFwiZGxcIiwgXCJkdFwiLCBcImVtXCIsIFwiZW1iZWRcIiwgXCJmaWVsZHNldFwiLCBcImZpZ2NhcHRpb25cIiwgXCJmaWd1cmVcIiwgXCJmb250XCIsIFwiZm9vdGVyXCIsIFwiZm9ybVwiLCBcImZyYW1lXCIsIFwiZnJhbWVzZXRcIiwgXCJoMVwiLCBcImgyXCIsIFwiaDNcIiwgXCJoNFwiLCBcImg1XCIsIFwiaDZcIiwgXCJoZWFkXCIsIFwiaGVhZGVyXCIsIFwiaGdyb3VwXCIsIFwiaHJcIiwgXCJpXCIsIFwiaWZyYW1lXCIsIFwiaW1nXCIsIFwiaW5wdXRcIiwgXCJpbnNcIiwgXCJrYmRcIiwgXCJsYWJlbFwiLCBcImxlZ2VuZFwiLCBcImxpXCIsIFwibGlua1wiLCBcIm1haW5cIiwgXCJtYXBcIiwgXCJtYXJrXCIsIFwibWFycXVlZVwiLCBcIm1lbnVcIiwgXCJtZXRhXCIsIFwibWV0ZXJcIiwgXCJuYXZcIiwgXCJub3NjcmlwdFwiLCBcIm9iamVjdFwiLCBcIm9sXCIsIFwib3B0Z3JvdXBcIiwgXCJvcHRpb25cIiwgXCJvdXRwdXRcIiwgXCJwXCIsIFwicGFyYW1cIiwgXCJwaWN0dXJlXCIsIFwicHJlXCIsIFwicHJvZ3Jlc3NcIiwgXCJxXCIsIFwicnBcIiwgXCJydFwiLCBcInJ1YnlcIiwgXCJzXCIsIFwic2FtcFwiLCBcInNjcmlwdFwiLCBcInNlY3Rpb25cIiwgXCJzZWxlY3RcIiwgXCJzbG90XCIsIFwic21hbGxcIiwgXCJzb3VyY2VcIiwgXCJzcGFuXCIsIFwic3Ryb25nXCIsIFwic3ViXCIsIFwic3VtbWFyeVwiLCBcInN1cFwiLCBcInRhYmxlXCIsIFwidGJvZHlcIiwgXCJ0ZFwiLCBcInRlbXBsYXRlXCIsIFwidGV4dGFyZWFcIiwgXCJ0Zm9vdFwiLCBcInRoXCIsIFwidGhlYWRcIiwgXCJ0aW1lXCIsIFwidGl0bGVcIiwgXCJ0clwiLCBcInRyYWNrXCIsIFwidVwiLCBcInVsXCIsIFwidmlkZW9cIiwgXCJ3YnJcIixcblx0XTtcblx0XG5cdC8qKlxuXHQgKiBcblx0ICovXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgcHJvdmlkZXI6IEhvdC5JTm9kZVByb3ZpZGVyID0ge30pXG5cdHtcblx0XHRzdXBlcigpO1xuXHRcdFxuXHRcdGZvciAoY29uc3QgbmFtZSBvZiBIb3QuZWxlbWVudHMpXG5cdFx0e1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIG5hbWUsIHtcblx0XHRcdFx0dmFsdWU6ICguLi5wYXJhbXM6IEhvdC5QYXJhbVtdKSA9PlxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0Y29uc3QgZWxlbWVudCA9IFxuXHRcdFx0XHRcdFx0cHJvdmlkZXIuY3JlYXRlRWxlbWVudD8uKG5hbWUpIHx8XG5cdFx0XHRcdFx0XHRkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5hbWUpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHJldHVybiB0aGlzLmFwcGx5KGVsZW1lbnQgYXMgSFRNTEVsZW1lbnQsIHBhcmFtcyk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH1cblx0XHRcblx0XHRpZiAodGhpcy5wcm92aWRlci5jcmVhdGVUZXh0KVxuXHRcdHtcblx0XHRcdGNvbnN0IGZuID0gdGhpcy5wcm92aWRlci5jcmVhdGVUZXh0O1xuXHRcdFx0dGhpcy50ZXh0ID0gKC4uLnN0cmluZ3M6IGFueVtdKSA9PiBmbihzdHJpbmdzLmpvaW4oXCJcIikpIGFzIFRleHQ7XG5cdFx0fVxuXHR9XG5cdFxuXHQvKipcblx0ICogQSBmdW5jdGlvbiB0aGF0IGNyZWF0ZXMgYSBuZXcgRE9NIFRleHQgbm9kZSwgYnV0IHdoaWNoIG1heSBiZSBvdmVycmlkZGVuXG5cdCAqIGluIHRoZSBjb25zdHJ1Y3RvciB0byByZXR1cm4gYSBkaWZmZXJlbnQgYnV0IGNvbXBhdGlibGUgdmFsdWUuXG5cdCAqL1xuXHR0ZXh0KHN0cmluZ3M6IFRlbXBsYXRlU3RyaW5nc0FycmF5KTogVGV4dFxuXHR0ZXh0KC4uLnN0cmluZ3M6IHN0cmluZ1tdKTogVGV4dFxuXHR0ZXh0KC4uLnN0cmluZ3M6IGFueVtdKVxuXHR7XG5cdFx0cmV0dXJuIG5ldyBUZXh0KHN0cmluZ3Muam9pbihcIlwiKSk7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgbmV3IEhvdCBjb250ZXh0IGZyb20gdGhlIHNwZWNpZmllZCBFbGVtZW50IG9yIHNlcmllcyBvZiBFbGVtZW50cy5cblx0ICovXG5cdGdldDxUIGV4dGVuZHMgRWxlbWVudCB8IEhvdC5IYXRMaWtlPihlOiBULCAuLi5vdGhlcnM6IEVsZW1lbnRbXSk6ICguLi5wYXJhbXM6IEhvdC5QYXJhbVtdKSA9PiBUO1xuXHRnZXQ8VCBleHRlbmRzIFNoYWRvd1Jvb3Q+KGU6IFQsIC4uLm90aGVyczogRWxlbWVudFtdKTogKC4uLnBhcmFtczogSG90LlNoYWRvd1BhcmFtW10pID0+IFQ7XG5cdGdldDxUPiguLi5lbGVtZW50czogVFtdKTogYW55XG5cdHtcblx0XHRyZXR1cm4gKC4uLnBhcmFtczogSG90LlBhcmFtW10pID0+XG5cdFx0e1xuXHRcdFx0Zm9yIChjb25zdCBlIG9mIGVsZW1lbnRzKVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAoSG90LmlzLmVsZW1lbnQoZSkgfHwgSG90LmlzLnNoYWRvdyhlKSlcblx0XHRcdFx0XHR0aGlzLmFwcGx5KGUgYXMgRWxlbWVudCwgcGFyYW1zKTtcblx0XHRcdFx0XG5cdFx0XHRcdGVsc2UgaWYgKEhvdC5pcy5lbGVtZW50KChlIGFzIGFueSBhcyBIb3QuSGF0TGlrZSkuaGVhZCkpXG5cdFx0XHRcdFx0dGhpcy5hcHBseSgoZSBhcyBhbnkgYXMgSG90LkhhdExpa2UpLmhlYWQsIHBhcmFtcyk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdHJldHVybiBlbGVtZW50c1swXSB8fCBudWxsO1xuXHRcdH07XG5cdH1cblx0XG5cdC8qKiAqL1xuXHRzdGF0aWMgcmVhZG9ubHkgaXMgPSBPYmplY3QuZnJlZXplKHtcblx0XHRub2RlKG46IGFueSk6IG4gaXMgTm9kZVxuXHRcdHtcblx0XHRcdGNvbnN0IHR5cGUgPSBuPy5ub2RlVHlwZTtcblx0XHRcdHJldHVybiB0eXBlb2YgdHlwZSA9PT0gXCJudW1iZXJcIiAmJiB0eXBlID4gMCAmJiB0eXBlIDwgMTM7XG5cdFx0fSxcblx0XHRlbGVtZW50KGU6IGFueSk6IGUgaXMgSFRNTEVsZW1lbnRcblx0XHR7XG5cdFx0XHRyZXR1cm4gISFlICYmIGUubm9kZVR5cGUgPT09IDE7XG5cdFx0fSxcblx0XHR0ZXh0KHQ6IGFueSk6IHQgaXMgVGV4dFxuXHRcdHtcblx0XHRcdHJldHVybiAhIXQgJiYgKHQgYXMgVGV4dCkubm9kZVR5cGUgPT09IDM7XG5cdFx0fSxcblx0XHRjb21tZW50KGM6IGFueSk6IGMgaXMgQ29tbWVudFxuXHRcdHtcblx0XHRcdHJldHVybiAhIWMgJiYgKGMgYXMgQ29tbWVudCkubm9kZVR5cGUgPT09IDg7XG5cdFx0fSxcblx0XHRzaGFkb3coYzogYW55KTogYyBpcyBTaGFkb3dSb290XG5cdFx0e1xuXHRcdFx0cmV0dXJuICEhYyAmJiAoYyBhcyBTaGFkb3dSb290KS5ub2RlVHlwZSA9PT0gMTEgJiYgSG90LmlzLmVsZW1lbnQoYy5ob3N0KTtcblx0XHR9LFxuXHR9KTtcblx0XG5cdC8qKlxuXHQgKiBcblx0ICovXG5cdHNoYWRvdyguLi5wYXJhbXM6IEhvdC5TaGFkb3dQYXJhbVtdKTogSG90LlBhcmFtXG5cdHtcblx0XHRyZXR1cm4gZSA9PlxuXHRcdHtcblx0XHRcdGNvbnN0IHNoYWRvdyA9IGUuc2hhZG93Um9vdCB8fCBlLmF0dGFjaFNoYWRvdyh7IG1vZGU6IFwib3BlblwiIH0pO1xuXHRcdFx0dGhpcy5hcHBseShzaGFkb3csIHBhcmFtcyBhcyBIb3QuUGFyYW1bXSk7XG5cdFx0fTtcblx0fVxuXHRcblx0LyoqICovXG5cdHByaXZhdGUgYXBwbHkoZTogRWxlbWVudCB8IFNoYWRvd1Jvb3QsIHBhcmFtczogSG90LlBhcmFtW10pXG5cdHtcblx0XHRpZiAodGhpcy5jc3NQcm9wZXJ0eVNldCA9PT0gbnVsbClcblx0XHR7XG5cdFx0XHRjb25zdCBwcm9wZXJ0eU5hbWVzOiBzdHJpbmdbXSA9IFtdO1xuXHRcdFx0XG5cdFx0XHRmb3IgKGNvbnN0IGtleSBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUpXG5cdFx0XHRcdHByb3BlcnR5TmFtZXMucHVzaChrZXkpO1xuXHRcdFx0XG5cdFx0XHR0aGlzLmNzc1Byb3BlcnR5U2V0ID0gbmV3IFNldChwcm9wZXJ0eU5hbWVzKTtcblx0XHR9XG5cdFx0XG5cdFx0Ly8gQ0FVVElPTjogVGhpcyBjb2RlIGlzICp2ZXJ5KiBwZXJmb3JtYW5jZSBzZW5zaXRpdmUuIEl0IHVzZXNcblx0XHQvLyBjb25zdHJ1Y3RvciBjaGVja3MgaW5zdGVhZCBvZiBpbnN0YW5jZW9mIGFuZCB0eXBlb2YgaW4gYW4gZWZmb3J0XG5cdFx0Ly8gdG8gc3F1ZWV6ZSBvdXQgbWF4aW11bSBwZXJmb3JtYW5jZS4gQmUgY2FyZWZ1bCBvZiBjaGFuZ2luZ1xuXHRcdC8vIHRoaXMgY29kZSB3aXRob3V0ICBoYXZpbmcgZnVsbCBrbm93bGVkZ2Ugb2Ygd2hhdCB5b3UncmUgZG9pbmcuXG5cdFx0Zm9yIChsZXQgaSA9IC0xLCBsZW5ndGggPSBwYXJhbXMubGVuZ3RoOyArK2kgPCBsZW5ndGg7KVxuXHRcdHtcblx0XHRcdGNvbnN0IHBhcmFtID0gcGFyYW1zW2ldO1xuXHRcdFx0aWYgKCFwYXJhbSlcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcblx0XHRcdGlmIChIb3QuaXMubm9kZShwYXJhbSkpXG5cdFx0XHR7XG5cdFx0XHRcdGUuYXBwZW5kKHBhcmFtKTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocGFyYW0pKVxuXHRcdFx0e1xuXHRcdFx0XHR0aGlzLmFwcGx5KGUsIHBhcmFtKTtcblx0XHRcdH1cblx0XHRcdGVsc2Ugc3dpdGNoIChwYXJhbS5jb25zdHJ1Y3Rvcilcblx0XHRcdHtcblx0XHRcdFx0Y2FzZSBIb3QuRXZlbnQ6XG5cdFx0XHRcdHtcblx0XHRcdFx0XHRpZiAoZSlcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRjb25zdCBoZSA9IHBhcmFtIGFzIEhvdC5FdmVudDtcblx0XHRcdFx0XHRcdGlmIChoZS50YXJnZXQpXG5cdFx0XHRcdFx0XHRcdGhlLmhvc3QgPSBlO1xuXHRcdFx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRlLmFkZEV2ZW50TGlzdGVuZXIoaGUudHlwZSwgaGUuaGFuZGxlciwgaGUub3B0aW9ucyk7XG5cdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRpZiAoaGUudHlwZSA9PT0gXCJjb25uZWN0ZWRcIiB8fCBoZS50eXBlID09PSBcInJlbmRlcmVkXCIpXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hd2FpdGluZ0Nvbm5lY3Rpb24ucHVzaChbZSwgaGUudHlwZSA9PT0gXCJyZW5kZXJlZFwiXSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrOyBjYXNlIFN0cmluZzpcblx0XHRcdFx0e1xuXHRcdFx0XHRcdC8vIE5vdGUgdGhhdCBTaGFkb3dSb290cyBjYW5ub3QgYWNjZXB0IHN0cmluZyBwYXJhbWV0ZXJzLlxuXHRcdFx0XHRcdGNvbnN0IGNzc0NsYXNzID0gcGFyYW0gYXMgc3RyaW5nO1xuXHRcdFx0XHRcdChlIGFzIEVsZW1lbnQpLmNsYXNzTGlzdC5hZGQoY3NzQ2xhc3MpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmIChjc3NDbGFzcy5pbmRleE9mKEhvdC5HZW5lcmF0ZWRDbGFzc1ByZWZpeC52YWx1ZSkgPT09IDApXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0Y29uc3QgbWF5YmVTaGFkb3cgPSBlLmdldFJvb3ROb2RlKCk7XG5cdFx0XHRcdFx0XHRpZiAoSG90LmlzLnNoYWRvdyhtYXliZVNoYWRvdykpXG5cdFx0XHRcdFx0XHRcdHRoaXMudG9TaGFkb3cobWF5YmVTaGFkb3csIGNzc0NsYXNzKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0YnJlYWs7IGNhc2UgT2JqZWN0OlxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0Y29uc3QgZWwgPSBlIGFzIGFueTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRmb3IgKGNvbnN0IFtuYW1lLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMocGFyYW0pKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdC8vIEphdmFTY3JpcHQgbnVtYmVycyB0aGF0IGFyZSBzcGVjaWZpZWQgaW4gdGhlIHdpZHRoIGFuZCBoZWlnaHQgcHJvcGVydGllc1xuXHRcdFx0XHRcdFx0Ly8gYXJlIGluamVjdGVkIGFzIEhUTUwgYXR0cmlidXRlcyByYXRoZXIgdGhhbiBhc3NpZ25lZCBhcyBDU1MgcHJvcGVydGllcy5cblx0XHRcdFx0XHRcdGlmICh2YWx1ZSAmJiBcblx0XHRcdFx0XHRcdFx0KG5hbWUgPT09IFwid2lkdGhcIiB8fCBuYW1lID09PSBcImhlaWdodFwiKSAmJlxuXHRcdFx0XHRcdFx0XHR0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdChlIGFzIEVsZW1lbnQpLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZS50b1N0cmluZygpKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGVsc2UgaWYgKG5hbWUgPT09IFwiZGF0YVwiKVxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHRmb3IgKGNvbnN0IFthdHRyTmFtZSwgYXR0clZhbHVlXSBvZiBPYmplY3QuZW50cmllcyh2YWx1ZSB8fCB7fSkpXG5cdFx0XHRcdFx0XHRcdFx0KGUgYXMgRWxlbWVudCkuc2V0QXR0cmlidXRlKFwiZGF0YS1cIiArIGF0dHJOYW1lLCBTdHJpbmcoYXR0clZhbHVlKSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHQvLyBXaWR0aCwgaGVpZ2h0LCBhbmQgYmFja2dyb3VuZCBwcm9wZXJ0aWVzIGFyZSBzcGVjaWFsIGNhc2VkLlxuXHRcdFx0XHRcdFx0Ly8gVGhleSBhcmUgaW50ZXJwcmV0ZWQgYXMgQ1NTIHByb3BlcnRpZXMgcmF0aGVyIHRoYW4gSFRNTCBhdHRyaWJ1dGVzLlxuXHRcdFx0XHRcdFx0ZWxzZSBpZiAobmFtZSBpbiBlICYmIFxuXHRcdFx0XHRcdFx0XHRuYW1lICE9PSBcImJhY2tncm91bmRcIiAmJiBcblx0XHRcdFx0XHRcdFx0bmFtZSAhPT0gXCJ3aWR0aFwiICYmIFxuXHRcdFx0XHRcdFx0XHRuYW1lICE9PSBcImhlaWdodFwiKVxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHQvLyBTb21lIGF0dHJpYnV0ZXMgY2FuJ3QgYmUgYXNzaWduZWQgd2l0aCBrZXllZCBwcm9wZXJ0eSBhY2Nlc3MsXG5cdFx0XHRcdFx0XHRcdC8vIGF0IGxlYXN0IGluIENocm9taXVtLWJhc2VkIGJyb3dzZXJzIChIVE1MVmlkZW9FbGVtZW50Lm11dGVkKS5cblx0XHRcdFx0XHRcdFx0Ly8gU28gaGVyZSwgd2UncmUgYXNzaWduaW5nIGJvdGggdGhlIEphdmFTY3JpcHQgcHJvcGVydHkgYW5kIGNhbGxpbmdcblx0XHRcdFx0XHRcdFx0Ly8gdGhlIHNldEF0dHJpYnV0ZSgpIGZ1bmN0aW9uIHRvIGVuc3VyZSB0aGF0IHRoZSBhdHRyaWJ1dGUgYWx3YXlzIFxuXHRcdFx0XHRcdFx0XHQvLyBzaG93cyB1cCBpbiB0aGUgRWxlbWVudC5nZXRBdHRyaWJ1dGVzKCkgbGlzdC5cblx0XHRcdFx0XHRcdFx0ZWxbbmFtZV0gPSB2YWx1ZTtcblx0XHRcdFx0XHRcdFx0KGUgYXMgRWxlbWVudCkuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGVsc2UgaWYgKHRoaXMuY3NzUHJvcGVydHlTZXQuaGFzKG5hbWUpKVxuXHRcdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XHR0aGlzLnNldFByb3BlcnR5KGVsLCBuYW1lLCB2YWx1ZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGJyZWFrOyBjYXNlIEZ1bmN0aW9uOlxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0aWYgKEhvdC5pcy5lbGVtZW50KGUpIHx8IEhvdC5pcy5zaGFkb3coZSkpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0Y29uc3QgZm4gPSBwYXJhbSBhcyBGdW5jdGlvbjtcblx0XHRcdFx0XHRcdGNvbnN0IHN1YlBhcmFtcyA9IGZuKGUpO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRpZiAoc3ViUGFyYW1zKVxuXHRcdFx0XHRcdFx0XHR0aGlzLmFwcGx5KGUsIEFycmF5LmlzQXJyYXkoc3ViUGFyYW1zKSA/IHN1YlBhcmFtcyA6IFtzdWJQYXJhbXNdKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGVmYXVsdDogXG5cdFx0XHRcdHtcblx0XHRcdFx0XHQvLyBVZ2x5LCBidXQgaGlnaC1wZXJmb3JtYW5jZSB3YXkgdG8gY2hlY2sgaWYgdGhlIHBhcmFtIGlzIGEgSGF0XG5cdFx0XHRcdFx0Ly8gKG1lYW5pbmcsIGFuIG9iamVjdCB3aXRoIGEgLmhlYWQgSFRNTEVsZW1lbnQgcHJvcGVydHkpIGNvbWluZyBcblx0XHRcdFx0XHQvLyBmcm9tIHRoZSBIYXQgbGlicmFyeS5cblx0XHRcdFx0XHRpZiAoISEocGFyYW3CoGFzIGFueSkuaGVhZCAmJiAocGFyYW0gYXMgYW55KS5oZWFkLkVMRU1FTlRfTk9ERSA9PT0gMSlcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHR0aGlzLmFwcGx5KGUsIFsocGFyYW0gYXMgYW55KS5oZWFkXSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVsc2UgaWYgKHR5cGVvZiBwYXJhbSA9PT0gXCJmdW5jdGlvblwiICYmIHBhcmFtLmNvbnN0cnVjdG9yLm5hbWUgPT09IFwiQXN5bmNGdW5jdGlvblwiKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHRoaXMuYXBwbHkoZSwgKHBhcmFtIGFzIEZ1bmN0aW9uKShlKSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBlO1xuXHR9XG5cdFxuXHRwcml2YXRlIGNzc1Byb3BlcnR5U2V0OiBTZXQ8c3RyaW5nPiB8IG51bGwgPSBudWxsO1xuXHRcblx0Ly8jIEV2ZW50IFJlbGF0ZWRcblx0XG5cdC8qKiAqL1xuXHRzdGF0aWMgcmVhZG9ubHkgRXZlbnQgPSBjbGFzcyBFdmVudFxuXHR7XG5cdFx0LyoqICovXG5cdFx0Y29uc3RydWN0b3IoXG5cdFx0XHRyZWFkb25seSB0YXJnZXQ6IE5vZGUgfCBudWxsLFxuXHRcdFx0cmVhZG9ubHkgdHlwZTogc3RyaW5nLFxuXHRcdFx0cmVhZG9ubHkgaGFuZGxlcjogKGV2OiBnbG9iYWxUaGlzLkV2ZW50KSA9PiB2b2lkLFxuXHRcdFx0cmVhZG9ubHkgb3B0aW9uczogUmVhZG9ubHk8QWRkRXZlbnRMaXN0ZW5lck9wdGlvbnM+ID0ge30pXG5cdFx0eyB9XG5cdFx0XG5cdFx0LyoqXG5cdFx0ICogU3RvcmVzIHRoZSBlbGVtZW50IHRoYXQgXCJob3N0c1wiIHRoZSBldmVudCwgd2hpY2ggaXMgbm90IG5lY2Vzc2FyaWx5XG5cdFx0ICogdGhlIHRhcmdldCBldmVudC4gV2hlbiB0aGUgaG9zdCBlbGVtZW50IGlzIHJlbW92ZWQgZnJvbSB0aGUgRE9NLFxuXHRcdCAqIHRoZSBldmVudCBoYW5kbGVyIGlzIHJlbW92ZWQuXG5cdFx0ICovXG5cdFx0aG9zdDogRWxlbWVudCB8IFNoYWRvd1Jvb3QgfCBudWxsID0gbnVsbDtcblx0fVxuXHRcblx0LyoqICovXG5cdG9uPEsgZXh0ZW5kcyBrZXlvZiBIb3QuRXh0ZW5kZWRFdmVudE1hcD4oXG5cdFx0dHlwZTogSyxcblx0XHRsaXN0ZW5lcjogKHRoaXM6IEhUTUxFbGVtZW50LCBldjogSG90LkV4dGVuZGVkRXZlbnRNYXBbS10pID0+IGFueSxcblx0XHRvcHRpb25zPzogYm9vbGVhbiB8IEV2ZW50TGlzdGVuZXJPcHRpb25zKTogSG90LkV2ZW50O1xuXHQvKiogKi9cblx0b248SyBleHRlbmRzIGtleW9mIEhvdC5FdmVudE1hcD4oXG5cdFx0cmVtb3RlVGFyZ2V0OiBOb2RlIHwgV2luZG93LFxuXHRcdHR5cGU6IEssXG5cdFx0bGlzdGVuZXI6ICh0aGlzOiBIVE1MRWxlbWVudCwgZXY6IEhvdC5FdmVudE1hcFtLXSkgPT4gYW55LFxuXHRcdG9wdGlvbnM/OiBib29sZWFuIHwgRXZlbnRMaXN0ZW5lck9wdGlvbnMpOiBIb3QuRXZlbnQ7XG5cdC8qKiAqL1xuXHRvbiguLi5hcmdzOiBhbnlbXSlcblx0e1xuXHRcdGNvbnN0IHRhcmdldDogTm9kZSB8IG51bGwgPSB0eXBlb2YgYXJnc1swXSA9PT0gXCJzdHJpbmdcIiA/IG51bGwgOiBhcmdzWzBdO1xuXHRcdGNvbnN0IHR5cGU6IHN0cmluZyA9IHR5cGVvZiBhcmdzWzBdID09PSBcInN0cmluZ1wiID8gYXJnc1swXSA6IGFyZ3NbMV07XG5cdFx0Y29uc3QgaGFuZGxlciA9IHR5cGVvZiBhcmdzWzFdID09PSBcImZ1bmN0aW9uXCIgPyBhcmdzWzFdIDogYXJnc1syXTtcblx0XHRjb25zdCBsYXN0ID0gYXJncy5wb3AoKTtcblx0XHRjb25zdCBvcHRpb25zOiBBZGRFdmVudExpc3RlbmVyT3B0aW9ucyA9IHR5cGVvZiBsYXN0ID09PSBcImZ1bmN0aW9uXCIgPyB7fSA6IGxhc3Q7XG5cdFx0XG5cdFx0aWYgKHR5cGUgPT09IFwiY29ubmVjdGVkXCIgfHwgdHlwZSA9PT0gXCJkaXNjb25uZWN0ZWRcIilcblx0XHR7XG5cdFx0XHR0aGlzLm1heWJlSW5zdGFsbFJvb3RPYnNlcnZlcigpO1xuXHRcdFx0b3B0aW9ucy5vbmNlID0gdHJ1ZTtcblx0XHR9XG5cdFx0XG5cdFx0Y29uc3QgaGV2ID0gbmV3IEhvdC5FdmVudCh0YXJnZXQsIHR5cGUsIGhhbmRsZXIsIG9wdGlvbnMpO1xuXHRcdFxuXHRcdC8vIElmIHRoZSBldmVudCBoYXMgYSBkZWZpbmVkIHRhcmdldCwgdGhlbiBhZGQgdGhlIGV2ZW50IGxpc3RlbmVyIHJpZ2h0IGF3YXksXG5cdFx0Ly8gYW5kIHRoZSBhcHBseSgpIGZ1bmN0aW9uIHdpbGwgYXNzaWduIGFueSBob3N0IGVsZW1lbnQsIGlmIHByZXNlbnQuXG5cdFx0aWYgKHRhcmdldClcblx0XHR7XG5cdFx0XHRsZXQgaGFuZGxlcjogKGV2OiBFdmVudCkgPT4gdm9pZDtcblx0XHRcdHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGhldi50eXBlLCBoYW5kbGVyID0gKGV2OiBFdmVudCkgPT5cblx0XHRcdHtcblx0XHRcdFx0aWYgKGhldi5ob3N0Py5pc0Nvbm5lY3RlZCAhPT0gZmFsc2UpXG5cdFx0XHRcdFx0aGV2LmhhbmRsZXIoZXYgYXMgYW55KTtcblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGhldi50eXBlLCBoYW5kbGVyKTtcblx0XHRcdH0sXG5cdFx0XHRvcHRpb25zKTtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIGhldjtcblx0fVxuXHRcblx0Ly8jIENvbm5lY3Rpb24gRXZlbnRzXG5cdFxuXHQvKiogKi9cblx0cHJpdmF0ZSBtYXliZUluc3RhbGxSb290T2JzZXJ2ZXIoKVxuXHR7XG5cdFx0aWYgKHRoaXMuaGFzSW5zdGFsbGVkUm9vdE9ic2VydmVyKVxuXHRcdFx0cmV0dXJuO1xuXHRcdFxuXHRcdHRoaXMuaGFzSW5zdGFsbGVkUm9vdE9ic2VydmVyID0gdHJ1ZTtcblx0XHRcblx0XHRuZXcgTXV0YXRpb25PYnNlcnZlcigoKSA9PlxuXHRcdHtcblx0XHRcdGNvbnN0IGludm9rYXRpb25zOiBbRWxlbWVudCB8IFNoYWRvd1Jvb3QsIGJvb2xlYW5dW10gPSBbXTtcblx0XHRcdFxuXHRcdFx0Zm9yIChsZXQgaSA9IHRoaXMuYXdhaXRpbmdDb25uZWN0aW9uLmxlbmd0aDsgaS0tID4gMDspXG5cdFx0XHR7XG5cdFx0XHRcdGNvbnN0IHR1cGxlID0gdGhpcy5hd2FpdGluZ0Nvbm5lY3Rpb25baV07XG5cdFx0XHRcdGlmICghdHVwbGVbMF0uaXNDb25uZWN0ZWQpXG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFxuXHRcdFx0XHR0aGlzLmF3YWl0aW5nQ29ubmVjdGlvbi5zcGxpY2UoaSwgMSk7XG5cdFx0XHRcdGludm9rYXRpb25zLnB1c2godHVwbGUpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHQvLyBSdW4gdGhlIGNhbGxiYWNrcyBpbiBhIHNlcGFyYXRlIHBhc3MsIHRvIGRlYWwgd2l0aCB0aGUgZmFjdCB0aGF0XG5cdFx0XHQvLyB0aGVyZSBjb3VsZCBiZSBtdWx0aXBsZSBhd2FpdGVycyB3YXRjaGluZyB0aGUgc2FtZSBlbGVtZW50LFxuXHRcdFx0Ly8gYnV0IGFsc28gdG8gaGFuZGxlIHRoZSBmYWN0IHRoZSBjYWxsYmFjayBmdW5jdGlvbnMgY291bGQgbW9kaWZ5XG5cdFx0XHQvLyB0aGUgYXdhaXRpbmcgbGlzdC5cblx0XHRcdGZvciAoY29uc3QgW2VsZW1lbnQsIGRlZmVyXSBvZiBpbnZva2F0aW9ucylcblx0XHRcdHtcblx0XHRcdFx0Y29uc3QgZXZlbnQgPSBuZXcgRXZlbnQoXCJjb25uZWN0ZWRcIiwge1xuXHRcdFx0XHRcdGJ1YmJsZXM6IHRydWUsXG5cdFx0XHRcdFx0Y2FuY2VsYWJsZTogdHJ1ZSxcblx0XHRcdFx0fSk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZiAoZGVmZXIpXG5cdFx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiBlbGVtZW50LmRpc3BhdGNoRXZlbnQoZXZlbnQpLCAxKTtcblx0XHRcdFx0ZWxzZVxuXHRcdFx0XHRcdGVsZW1lbnQuZGlzcGF0Y2hFdmVudChldmVudCk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHR9KS5vYnNlcnZlKGRvY3VtZW50LmJvZHksIHsgY2hpbGRMaXN0OiB0cnVlLCBzdWJ0cmVlOiB0cnVlIH0pO1xuXHR9XG5cdFxuXHRwcml2YXRlIGhhc0luc3RhbGxlZFJvb3RPYnNlcnZlciA9IGZhbHNlO1xuXHRwcml2YXRlIHJlYWRvbmx5IGF3YWl0aW5nQ29ubmVjdGlvbjogW0VsZW1lbnQgfCBTaGFkb3dSb290LCBib29sZWFuXVtdID0gW107XG5cdFxuXHQvLyMgU3R5bGUgUmVsYXRlZFxuXHRcblx0LyoqXG5cdCAqIENyZWF0ZXMgYW4gSFRNTCA8c3R5bGU+IGVsZW1lbnQgd2l0aCB0aGUgc3BlY2lmaWVkIGF0dHJpYnV0ZXMsXG5cdCAqIGFuZCB3aXRoIHRoZSBzcGVjaWZpZWQgQ1NTIHJ1bGVzIGVtYmVkZGVkLlxuXHQgKi9cblx0c3R5bGUoYXR0cmlidXRlczogSG90LkVsZW1lbnRBdHRyaWJ1dGUsIC4uLmNvbXBvbmVudHM6IChzdHJpbmcgfCBIb3QuU3R5bGUpW10pOiBIb3QuSFRNTEhvdFN0eWxlRWxlbWVudDtcblx0LyoqXG5cdCAqIENyZWF0ZXMgYW4gSFRNTCA8c3R5bGU+IGVsZW1lbnQgd2l0aCB0aGUgc3BlY2lmaWVkIENTUyBydWxlcyBlbWJlZGRlZC5cblx0ICovXG5cdHN0eWxlKC4uLmNvbXBvbmVudHM6IChzdHJpbmcgfCBIb3QuU3R5bGUpW10pOiBIb3QuSFRNTEhvdFN0eWxlRWxlbWVudDtcblx0LyoqXG5cdCAqIENyZWF0ZXMgYW4gSFRNTCA8c3R5bGU+IGVsZW1lbnQgd2l0aCB0aGUgc3BlY2lmaWVkIGF0dHJpYnV0ZXMsXG5cdCAqIGFuZCB3aXRoIHRoZSBzcGVjaWZpZWQgcmF3IENTUyB0ZXh0IGVtYmVkZGVkLlxuXHQgKi9cblx0c3R5bGUoYXR0cmlidXRlczogSG90LkVsZW1lbnRBdHRyaWJ1dGUsIC4uLnJhd0NzczogVGV4dFtdKTogSG90LkhUTUxIb3RTdHlsZUVsZW1lbnQ7XG5cdC8qKlxuXHQgKiBDcmVhdGVzIGFuIEhUTUwgPHN0eWxlPiBlbGVtZW50IHRoYXQgY29udGFpbnMgdGhlIHNwZWNpZmllZCByYXcgQ1NTIHRleHQgZW1iZWRkZWQuXG5cdCAqL1xuXHRzdHlsZSguLi5yYXdDc3M6IFRleHRbXSk6IEhvdC5IVE1MSG90U3R5bGVFbGVtZW50O1xuXHRzdHlsZSguLi5hcmdzOiBhbnlbXSlcblx0e1xuXHRcdGNvbnN0IGVsZW1lbnQgPSBcblx0XHRcdCh0aGlzLnByb3ZpZGVyLmNyZWF0ZUVsZW1lbnQ/LihcInN0eWxlXCIpIGFzIEhvdC5IVE1MSG90U3R5bGVFbGVtZW50KSB8fFxuXHRcdFx0ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuXHRcdFxuXHRcdGVsZW1lbnQuYXR0YWNoID0gZnVuY3Rpb24obj86IE5vZGUpXG5cdFx0e1xuXHRcdFx0Y29uc3Qgcm9vdCA9IG4gPyBuLmdldFJvb3ROb2RlKCkgOiBkb2N1bWVudDtcblx0XHRcdGNvbnN0IGNvbnRhaW5lciA9IHJvb3QgaW5zdGFuY2VvZiBEb2N1bWVudCA/IHJvb3QuaGVhZCA6IHJvb3Q7XG5cdFx0XHRjb250YWluZXIuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudDtcblx0XHR9O1xuXHRcdFxuXHRcdGlmIChhcmdzLmxlbmd0aCA9PT0gMClcblx0XHRcdHJldHVybiBlbGVtZW50O1xuXHRcdFxuXHRcdGlmICh0eXBlb2YgYXJnc1swXSAhPT0gXCJzdHJpbmdcIilcblx0XHRcdHRoaXMuZ2V0KGVsZW1lbnQpKGFyZ3Muc2hpZnQoKSk7XG5cdFx0XG5cdFx0aWYgKGFyZ3MuZXZlcnkoYSA9PiBIb3QuaXMudGV4dChhKSkpXG5cdFx0e1xuXHRcdFx0ZWxlbWVudC5hcHBlbmQoLi4uYXJncyk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudDtcblx0XHR9XG5cdFx0XG5cdFx0Y29uc3QgY3NzVGV4dDogc3RyaW5nW10gPSBbXTtcblx0XHRcblx0XHQvLyBDcmVhdGVzIGEgZmFrZSBDU1MgcnVsZSwgd2hvc2Ugb25seSBwdXJwb3NlIGlzIHRvIGNhcHR1cmUgdGhlIGNhbGxzXG5cdFx0Ly8gdG8gc2V0UHJvcGVydHkoKSwgYW5kIGZvcndhcmQgdGhlIHN0cmluZyBjb250ZW50cyB0byB0aGUgY3NzVGV4dCBhcnJheSxcblx0XHQvLyBzbyB0aGF0IGEgc3RyaW5nIHJ1bGUgY2FuIGJlIGNvbXBvc2VkLlxuXHRcdGNvbnN0IGZha2VSdWxlOiBIb3QuSUNTU1N0eWxlUnVsZUxpa2UgPSB7XG5cdFx0XHRzdHlsZToge1xuXHRcdFx0XHRzZXRQcm9wZXJ0eShuYW1lLCB2YWx1ZSwgaW1wb3J0YW50KVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0Y3NzVGV4dC5wdXNoKG5hbWUgKyBcIjogXCIgKyB2YWx1ZSArIChpbXBvcnRhbnQgPyBcIiAhXCIgKyBpbXBvcnRhbnQgOiBcIlwiKSArIFwiO1wiKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdFx0XG5cdFx0Zm9yIChjb25zdCBncm91cCBvZiB0aGlzLmNyZWF0ZUNzc1J1bGVHcm91cHMoYXJncykpXG5cdFx0e1xuXHRcdFx0Y3NzVGV4dC5wdXNoKGdyb3VwLnNlbGVjdG9yLCBcIntcIik7XG5cdFx0XHRcblx0XHRcdGZvciAoY29uc3Qgc3R5bGVzT2JqZWN0IG9mIGdyb3VwLnN0eWxlcylcblx0XHRcdFx0Zm9yIChsZXQgW24sIHZdIG9mIE9iamVjdC5lbnRyaWVzKHN0eWxlc09iamVjdCkpXG5cdFx0XHRcdFx0aWYgKHR5cGVvZiB2ID09PSBcInN0cmluZ1wiIHx8ICh0eXBlb2YgdiA9PT0gXCJudW1iZXJcIiAmJiB2ID09PSB2KSlcblx0XHRcdFx0XHRcdHRoaXMuc2V0UHJvcGVydHkoZmFrZVJ1bGUsIG4sIHYsIGdyb3VwLnNlbGVjdG9yKTtcblx0XHRcdFxuXHRcdFx0Y3NzVGV4dC5wdXNoKFwifVwiKTtcblx0XHR9XG5cdFx0XG5cdFx0ZWxlbWVudC5hcHBlbmQobmV3IFRleHQoY3NzVGV4dC5qb2luKFwiXCIpKSk7XG5cdFx0cmV0dXJuIGVsZW1lbnQ7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgc2VyaWVzIG9mIENTUyBydWxlcyBpbnRlcm5hbGx5LCBhbmQgcmV0dXJucyBhIGNsYXNzIHRoYXRcblx0ICogY2FuIGJlIGFwcGxpZWQgdG8gSFRNTCBlbGVtZW50cyBpbiBvcmRlciB0byBhcHBseSB0aGUgcnVsZXMgdG9cblx0ICogdGhlbS5cblx0ICovXG5cdGNzcyguLi5jb21wb25lbnRzOiBIb3QuQ3NzUGFyYW1bXSlcblx0e1xuXHRcdGNvbnN0IHN0eWxlRWxlbWVudCA9IHRoaXMuZ2V0U2NvcGVkU3R5bGVFbGVtZW50KGRvY3VtZW50KTtcblx0XHRjb25zdCBjc3NKc29uVGV4dCA9IEpTT04uc3RyaW5naWZ5KGNvbXBvbmVudHMpO1xuXHRcdGNvbXBvbmVudHMgPSBKU09OLnBhcnNlKGNzc0pzb25UZXh0KTtcblx0XHRjb25zdCBjc3NIYXNoQ2xhc3MgPSBIb3QuR2VuZXJhdGVkQ2xhc3NQcmVmaXgudmFsdWUgKyB0aGlzLmhhc2goY3NzSnNvblRleHQpO1xuXHRcdHRoaXMuYXBwbHlDc3NUb1Njb3BlKHN0eWxlRWxlbWVudCwgY3NzSGFzaENsYXNzLCBjb21wb25lbnRzKTtcblx0XHRyZXR1cm4gY3NzSGFzaENsYXNzO1xuXHR9XG5cdFxuXHQvKipcblx0ICogQ29waWVzIHRoZSBydWxlcyB0aGF0IGFyZSBjb25uZWN0ZWQgdG8gdGhlIHNwZWNpZmllZCBDU1MgY2xhc3Ncblx0ICogKHdoaWNoIGlzIGV4cGVjdGVkIHRvIGJlIGEgaGFzaCBvZiBDU1MgcnVsZXMpIHNvIHRoYXQgdGhleSBhcmVcblx0ICogdmlzaWJsZSB3aXRoaW4gdGhlIHNwZWNpZmllZCBTaGFkb3dSb290LlxuXHQgKi9cblx0cHJpdmF0ZSB0b1NoYWRvdyhzaGFkb3c6IFNoYWRvd1Jvb3QsIGNzc0hhc2hDbGFzczogc3RyaW5nKVxuXHR7XG5cdFx0Y29uc3Qgc3R5bGVFbGVtZW50ID0gdGhpcy5nZXRTY29wZWRTdHlsZUVsZW1lbnQoc2hhZG93KTtcblx0XHRjb25zdCBjc3NQYXJhbXMgPSBIb3QucnVsZURhdGEuZ2V0KHN0eWxlRWxlbWVudCk/LmdldChjc3NIYXNoQ2xhc3MpO1xuXHRcdGlmIChjc3NQYXJhbXMpXG5cdFx0XHR0aGlzLmFwcGx5Q3NzVG9TY29wZShzdHlsZUVsZW1lbnQsIGNzc0hhc2hDbGFzcywgY3NzUGFyYW1zKTtcblx0fVxuXHRcblx0LyoqICovXG5cdHByaXZhdGUgYXBwbHlDc3NUb1Njb3BlKFxuXHRcdHN0eWxlRWxlbWVudDogSFRNTFN0eWxlRWxlbWVudCxcblx0XHRjc3NIYXNoQ2xhc3M6IHN0cmluZyxcblx0XHRjb21wb25lbnRzOiBIb3QuQ3NzUGFyYW1bXSlcblx0e1xuXHRcdC8vIERvbid0IGNyZWF0ZSBhbm90aGVyIENTUyBydWxlIGlmIHRoZXJlIGlzIGFscmVhZHkgb25lXG5cdFx0Ly8gdGhhdCBleGlzdHMgd2l0aGluIHRoZSBwcm92aWRlZCA8c3R5bGU+IGVsZW1lbnQgd2l0aFxuXHRcdC8vIHRoZSBwcm92aWRlZCBydWxlIGhhc2guXG5cdFx0aWYgKEhvdC5ydWxlRGF0YS5nZXQoc3R5bGVFbGVtZW50KT8uZ2V0KGNzc0hhc2hDbGFzcykpXG5cdFx0XHRyZXR1cm47XG5cdFx0XG5cdFx0Y29uc3Qgc2hlZXQgPSBzdHlsZUVsZW1lbnQuc2hlZXQhO1xuXHRcdGNvbnN0IGdyb3VwcyA9IHRoaXMuY3JlYXRlQ3NzUnVsZUdyb3Vwcyhjb21wb25lbnRzKTtcblx0XHRcblx0XHRmb3IgKGNvbnN0IGdyb3VwIG9mIGdyb3Vwcylcblx0XHR7XG5cdFx0XHRjb25zdCBzZWxlY3RvclBhcnRzID0gZ3JvdXAuc2VsZWN0b3Iuc3BsaXQoXCImXCIpO1xuXHRcdFx0bGV0IHNlbGVjdG9yID0gZ3JvdXAuc2VsZWN0b3I7XG5cdFx0XHRcblx0XHRcdGlmIChzZWxlY3Rvci5zdGFydHNXaXRoKFwiKlwiKSlcblx0XHRcdHtcblx0XHRcdFx0c2VsZWN0b3IgPSBcIi5cIiArIGNzc0hhc2hDbGFzcyArIFwiIFwiICsgc2VsZWN0b3I7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChzZWxlY3RvciAhPT0gXCI6cm9vdFwiKVxuXHRcdFx0e1xuXHRcdFx0XHRbc2VsZWN0b3JdID0gdGhpcy50cmltSW1wb3J0YW50KFxuXHRcdFx0XHRcdHNlbGVjdG9yUGFydHMubGVuZ3RoID09PSAxID9cblx0XHRcdFx0XHRcdFwiLlwiICsgY3NzSGFzaENsYXNzICsgZ3JvdXAuc2VsZWN0b3IgOlxuXHRcdFx0XHRcdFx0c2VsZWN0b3JQYXJ0cy5qb2luKFwiLlwiICsgY3NzSGFzaENsYXNzKSk7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGNvbnN0IGlkeCA9IHNoZWV0Lmluc2VydFJ1bGUoc2VsZWN0b3IgKyBcInt9XCIpO1xuXHRcdFx0Y29uc3QgY3NzUnVsZSA9IHNoZWV0LmNzc1J1bGVzLml0ZW0oaWR4KSBhcyBDU1NTdHlsZVJ1bGU7XG5cdFx0XHRcblx0XHRcdGZvciAoY29uc3Qgc3R5bGVzT2JqZWN0IG9mIGdyb3VwLnN0eWxlcylcblx0XHRcdFx0Zm9yIChsZXQgW24sIHZdIG9mIE9iamVjdC5lbnRyaWVzKHN0eWxlc09iamVjdCkpXG5cdFx0XHRcdFx0aWYgKHR5cGVvZiB2ID09PSBcInN0cmluZ1wiIHx8ICh0eXBlb2YgdiA9PT0gXCJudW1iZXJcIiAmJiB2ID09PSB2KSlcblx0XHRcdFx0XHRcdHRoaXMuc2V0UHJvcGVydHkoY3NzUnVsZSwgbiwgdiwgZ3JvdXAuc2VsZWN0b3IpO1xuXHRcdH1cblx0XHRcblx0XHRsZXQgaGFzaFNldCA9IEhvdC5ydWxlRGF0YS5nZXQoc3R5bGVFbGVtZW50KTtcblx0XHRpZiAoaGFzaFNldClcblx0XHRcdGhhc2hTZXQuc2V0KGNzc0hhc2hDbGFzcywgY29tcG9uZW50cyk7XG5cdFx0ZWxzZVxuXHRcdFx0SG90LnJ1bGVEYXRhLnNldChzdHlsZUVsZW1lbnQsIGhhc2hTZXQgPSBuZXcgTWFwKFtbY3NzSGFzaENsYXNzLCBjb21wb25lbnRzXV0pKTtcblx0fVxuXHRcblx0LyoqXG5cdCAqIFN0b3JlcyBhIFdlYWtNYXAgb2YgU2V0cyBvZiB0aGUgaGFzaGVzIG9mIHRoZSBjb250ZW50cyBvZiBlYWNoIENTUyBydWxlXG5cdCAqIHRoYXQgaGFzIGJlZW4gYXBwbGllZCB0byBhIGdpdmVuIGdlbmVyYXRlZCA8c3R5bGU+IGVsZW1lbnQuXG5cdCAqL1xuXHRwcml2YXRlIHN0YXRpYyByZWFkb25seSBydWxlRGF0YSA9IG5ldyBXZWFrTWFwPEhUTUxTdHlsZUVsZW1lbnQsIE1hcDxzdHJpbmcsIEhvdC5Dc3NQYXJhbVtdPj4oKTtcblx0XG5cdC8qKiAqL1xuXHRwcml2YXRlIGNyZWF0ZUNzc1J1bGVHcm91cHMoY29tcG9uZW50czogcmVhZG9ubHkgKHN0cmluZyB8IEhvdC5TdHlsZSlbXSlcblx0e1xuXHRcdGNvbnN0IGdyb3VwczogeyBzZWxlY3Rvcjogc3RyaW5nLCBzdHlsZXM6IEhvdC5TdHlsZVtdIH1bXSA9IFt7IHNlbGVjdG9yOiBcIlwiLCBzdHlsZXM6IFtdIH1dO1xuXHRcdGZvciAobGV0IGkgPSAtMTsgKytpIDwgY29tcG9uZW50cy5sZW5ndGg7KVxuXHRcdHtcblx0XHRcdGNvbnN0IGN1ciA9IGNvbXBvbmVudHNbaV07XG5cdFx0XHRjb25zdCBsYXN0ID0gaSA+IDAgJiYgY29tcG9uZW50c1tpIC0gMV07XG5cdFx0XHRcblx0XHRcdGlmICh0eXBlb2YgY3VyID09PSBcInN0cmluZ1wiICYmIHR5cGVvZiBsYXN0ID09PSBcIm9iamVjdFwiKVxuXHRcdFx0XHRncm91cHMucHVzaCh7IHNlbGVjdG9yOiBcIlwiLCBzdHlsZXM6IFtdIH0pO1xuXHRcdFx0XG5cdFx0XHRjb25zdCBncm91cCA9IGdyb3Vwc1tncm91cHMubGVuZ3RoIC0gMV07XG5cdFx0XHRcblx0XHRcdGlmICh0eXBlb2YgY3VyID09PSBcInN0cmluZ1wiKVxuXHRcdFx0XHRncm91cC5zZWxlY3RvciArPSBjdXI7XG5cdFx0XHRlbHNlXG5cdFx0XHRcdGdyb3VwLnN0eWxlcy5wdXNoKGN1cik7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBncm91cHM7XG5cdH1cblx0XG5cdC8qKiAqL1xuXHRwcml2YXRlIHNldFByb3BlcnR5KFxuXHRcdHN0eWxlYWJsZTogSG90LklDU1NTdHlsZVJ1bGVMaWtlLFxuXHRcdHByb3BlcnR5OiBzdHJpbmcsXG5cdFx0dmFsdWU6IHN0cmluZyB8IG51bWJlciB8IChzdHJpbmcgfCBudW1iZXIpW10sXG5cdFx0c2VsZWN0b3JPZkNvbnRhaW5pbmdSdWxlID0gXCJcIilcblx0e1xuXHRcdGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpXG5cdFx0XHR2YWx1ZSB8fD0gMDtcblx0XHRcblx0XHRjb25zdCBbLCBzZWxlY3RvckltcG9ydGFudF0gPSB0aGlzLnRyaW1JbXBvcnRhbnQoc2VsZWN0b3JPZkNvbnRhaW5pbmdSdWxlKTtcblx0XHRjb25zdCBwID0gdGhpcy50b0Nzc0Rhc2hDYXNlKHByb3BlcnR5KTtcblx0XHRcblx0XHRpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKVxuXHRcdHtcblx0XHRcdGNvbnN0IFt2LCB2YWx1ZUltcG9ydGFudF0gPSB0aGlzLnRyaW1JbXBvcnRhbnQoU3RyaW5nKHZhbHVlKSk7XG5cdFx0XHRzdHlsZWFibGUuc3R5bGUuc2V0UHJvcGVydHkocCwgdiwgc2VsZWN0b3JJbXBvcnRhbnQgfHwgdmFsdWVJbXBvcnRhbnQpO1xuXHRcdH1cblx0XHRlbHNlIGZvciAoY29uc3QgaXRlbSBvZiB2YWx1ZSlcblx0XHR7XG5cdFx0XHRjb25zdCBbdiwgdmFsdWVJbXBvcnRhbnRdID0gdGhpcy50cmltSW1wb3J0YW50KFN0cmluZyhpdGVtKSk7XG5cdFx0XHRzdHlsZWFibGUuc3R5bGUuc2V0UHJvcGVydHkocCwgdiwgc2VsZWN0b3JJbXBvcnRhbnQgfHwgdmFsdWVJbXBvcnRhbnQpO1xuXHRcdH1cblx0fVxuXHRcblx0LyoqICovXG5cdHByaXZhdGUgdG9Dc3NEYXNoQ2FzZShwOiBzdHJpbmcpXG5cdHtcblx0XHRwID0gcC5yZXBsYWNlKC9bQS1aXS9nLCBjaGFyID0+IFwiLVwiICsgY2hhci50b0xvd2VyQ2FzZSgpKTtcblx0XHRpZiAocC5zbGljZSgwLCA2KSA9PT0gXCJ3ZWJraXRcIiB8fCBwLnNsaWNlKDAsIDMpID09PSBcIm1velwiIHx8IHAuc2xpY2UoMCwgMikgPT09IFwibXNcIilcblx0XHRcdHAgPSBcIi1cIiArIHA7XG5cdFx0XG5cdFx0cmV0dXJuIHA7XG5cdH1cblx0XG5cdC8qKiAqL1xuXHRwcml2YXRlIHRyaW1JbXBvcnRhbnQoc3RyOiBzdHJpbmcpOiBbc3RyaW5nLCBzdHJpbmcgfCB1bmRlZmluZWRdXG5cdHtcblx0XHRpZiAoc3RyLnNsaWNlKC0xKSA9PT0gXCIhXCIpXG5cdFx0XHRzdHIgPSBzdHIuc2xpY2UoMCwgLTEpO1xuXHRcdFxuXHRcdGVsc2UgaWYgKHN0ci5zbGljZSgtMTApID09PSBcIiFpbXBvcnRhbnRcIilcblx0XHRcdHN0ciA9IHN0ci5zbGljZSgwLCAtMTApO1xuXHRcdFxuXHRcdGVsc2UgcmV0dXJuIFtzdHIsIHVuZGVmaW5lZF07XG5cdFx0XG5cdFx0cmV0dXJuIFtzdHIsIFwiaW1wb3J0YW50XCJdO1xuXHR9XG5cdFxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgQ1NTU3R5bGVTaGVldCB0aGF0IHN0b3JlcyB0aGUgQ1NTIHJ1bGVzIHRoYXQgc2hvdWxkXG5cdCAqIHRhcmdldCB0aGUgc3BlY2lmaWVkIGVsZW1lbnQuIElmIHRoZSBlbGVtZW50IGlzIHdpdGhpbiBhIHNoYWRvdyByb290LFxuXHQgKiB0aGUgc2hlZXQgdGhhdCBpcyByZXR1cm5lZCBpcyB0aGUgb25lIHRoYXQgaXMgY29udGFpbmVkIHdpdGhpbiB0aGlzXG5cdCAqIHNoYWRvdyByb290LlxuXHQgKi9cblx0cHJpdmF0ZSBnZXRTY29wZWRTdHlsZUVsZW1lbnQoYXBwbHlUYXJnZXQ6IFBhcmVudE5vZGUpXG5cdHtcblx0XHRsZXQgY29udGFpbmVyOiBQYXJlbnROb2RlID0gKCgpID0+XG5cdFx0e1xuXHRcdFx0aWYgKEhvdC5pcy5zaGFkb3coYXBwbHlUYXJnZXQpKVxuXHRcdFx0XHRyZXR1cm4gYXBwbHlUYXJnZXQ7XG5cdFx0XHRcblx0XHRcdGNvbnN0IHJvb3QgPSBhcHBseVRhcmdldC5nZXRSb290Tm9kZSgpO1xuXHRcdFx0cmV0dXJuIHJvb3QgaW5zdGFuY2VvZiBEb2N1bWVudCA/XG5cdFx0XHRcdHJvb3QuaGVhZCA6XG5cdFx0XHRcdHJvb3QgYXMgU2hhZG93Um9vdDtcblx0XHR9KSgpO1xuXHRcdFxuXHRcdGNvbnN0IGNscyA9IFwiaG90LXN0eWxlLXNoZWV0XCI7XG5cdFx0Y29uc3QgY2hpbGRyZW4gPSBBcnJheS5mcm9tKGNvbnRhaW5lci5jaGlsZHJlbik7XG5cdFx0Y29uc3QgZXhpc3RpbmcgPSBjaGlsZHJlbi5maW5kKGUgPT4gZS5jbGFzc0xpc3QuY29udGFpbnMoY2xzKSk7XG5cdFx0XG5cdFx0aWYgKGV4aXN0aW5nIGluc3RhbmNlb2YgSFRNTFN0eWxlRWxlbWVudClcblx0XHRcdHJldHVybiBleGlzdGluZztcblx0XHRcblx0XHRjb25zdCBzdHlsZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG5cdFx0c3R5bGVFbGVtZW50LmNsYXNzTmFtZSA9IGNscztcblx0XHRjb250YWluZXIuYXBwZW5kKHN0eWxlRWxlbWVudCk7XG5cdFx0cmV0dXJuIHN0eWxlRWxlbWVudDtcblx0fVxuXHRcblx0LyoqXG5cdCAqIEhhc2ggY2FsY3VsYXRpb24gZnVuY3Rpb24gYWRhcHRlZCBmcm9tOlxuXHQgKiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNTIxNzE0ODAvMTMzNzM3XG5cdCAqL1xuXHRwcml2YXRlIGhhc2godmFsdWU6IHsgdG9TdHJpbmcoKTogc3RyaW5nOyB9LCBzZWVkID0gMClcblx0e1xuXHRcdGNvbnN0IHZhbCA9IHZhbHVlLnRvU3RyaW5nKCk7XG5cdFx0bGV0IGgxID0gMHhERUFEQkVFRiBeIHNlZWQ7XG5cdFx0bGV0IGgyID0gMFg0MUM2Q0U1NyBeIHNlZWQ7XG5cdFx0XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB2YWwubGVuZ3RoOyBpKyspXG5cdFx0e1xuXHRcdFx0bGV0IGNoID0gdmFsLmNoYXJDb2RlQXQoaSk7XG5cdFx0XHRoMSA9IE1hdGguaW11bChoMSBeIGNoLCAyNjU0NDM1NzYxKTtcblx0XHRcdGgyID0gTWF0aC5pbXVsKGgyIF4gY2gsIDE1OTczMzQ2NzcpO1xuXHRcdH1cblx0XHRcblx0XHRoMSA9IE1hdGguaW11bChoMSBeIGgxID4+PiAxNiwgMjI0NjgyMjUwNykgXiBNYXRoLmltdWwoaDIgXiBoMiA+Pj4gMTMsIDMyNjY0ODk5MDkpO1xuXHRcdGgyID0gTWF0aC5pbXVsKGgyIF4gaDIgPj4+IDE2LCAyMjQ2ODIyNTA3KSBeIE1hdGguaW11bChoMSBeIGgxID4+PiAxMywgMzI2NjQ4OTkwOSk7XG5cdFx0cmV0dXJuIDQyOTQ5NjcyOTYgKiAoMjA5NzE1MSAmIGgyKSArIChoMSA+Pj4gMCk7XG5cdH1cbn1cblxuZGVjbGFyZSBuYW1lc3BhY2UgSG90XG57XG5cdC8qKlxuXHQgKiBBIGNsYXNzIHRoYXQgY2FuIGJlIHBhc3NlZCB0byB0aGUgSG90IGNvbnN0cnVjdG9yIGluIG9yZGVyIHRvXG5cdCAqIHByb3ZpZGUgYSB3YXkgdG8gb3ZlcnJpZGUgdGhlIGZ1bmN0aW9ucyB0aGF0IGFyZSBjYWxsZWQgdG8gY29uc3RydWN0XG5cdCAqIERPTSBvYmplY3RzLiBcblx0ICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgSU5vZGVQcm92aWRlclxuXHR7XG5cdFx0Y3JlYXRlRWxlbWVudD86ICh0YWdOYW1lOiBzdHJpbmcpID0+IElIVE1MRWxlbWVudExpa2U7XG5cdFx0Y3JlYXRlR2xvYmFsU3R5bGVTaGVldD86ICgpID0+IENTU1N0eWxlU2hlZXQ7XG5cdFx0Y3JlYXRlVGV4dD86ICh0ZXh0Q29udGVudDogc3RyaW5nKSA9PiBJTm9kZUxpa2U7XG5cdH1cblx0XG5cdC8qKiAqL1xuXHRleHBvcnQgdHlwZSBFbGVtZW50Q2xvc3VyZSA9ICgoZTogSFRNTEVsZW1lbnQpID0+IFBhcmFtIHwgUGFyYW1bXSk7XG5cdFxuXHQvKiogKi9cblx0ZXhwb3J0IHR5cGUgU2hhZG93Q2xvc3VyZSA9ICgoZTogU2hhZG93Um9vdCkgPT4gUGFyYW0gfCBQYXJhbVtdKTtcblx0XG5cdC8qKiAqL1xuXHRleHBvcnQgdHlwZSBIYXRMaWtlID0geyByZWFkb25seSBoZWFkOiBIVE1MRWxlbWVudDsgfTtcbn1cblxuLy8jIEVsZW1lbnQgUmVsYXRlZFxuXG5kZWNsYXJlIG5hbWVzcGFjZSBIb3Rcbntcblx0LyoqXG5cdCAqIEZha2Ugbm9kZSBjbGFzcywgd2hpY2ggaXMgY29tcGF0aWJsZSB3aXRoIHRoZSBhY3R1YWwgTm9kZSBpbnRlcmZhY2UsXG5cdCAqIGJ1dCBkb25lIHdpdGggbWluaW1hbCBwcm9wZXJ0aWVzIGluIG9yZGVyIHRvIG5vdCBuZWdhdGl2ZWx5IGFmZmVjdFxuXHQgKiB0aGUgcXVhbGl0eSBvZiB0aGUgYXV0b2NvbXBsZXRpb24gZXhwZXJpZW5jZS5cblx0ICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgSU5vZGVMaWtlXG5cdHtcblx0XHQvKiogKi9cblx0XHRyZWFkb25seSBub2RlVHlwZTogbnVtYmVyO1xuXHRcdFxuXHRcdC8qKiAqL1xuXHRcdHJlYWRvbmx5IG5vZGVOYW1lOiBzdHJpbmc7XG5cdFx0XG5cdFx0LyoqICovXG5cdFx0cmVhZG9ubHkgbm9kZVZhbHVlOiBzdHJpbmcgfCBudWxsO1xuXHR9XG5cdFxuXHQvKipcblx0ICogQSBjbGFzcyB0aGF0IGRlc2NyaWJlcyB0aGUgbWluaW1hbCBzZXQgb2YgbWVtYmVycyB0aGF0IG5lZWQgdG9cblx0ICogYmUgaW1wbGVtZW50ZWQgb24gSFRNTCBlbGVtZW50cyBpbiBvcmRlciB0byBjcmVhdGUgYSBjdXN0b21cblx0ICogaG90LmpzIGNvbXBhdGlibGUgSUhUTUxFbGVtZW50TGlrZS5cblx0ICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgSUhUTUxFbGVtZW50TGlrZSBleHRlbmRzIElOb2RlTGlrZVxuXHR7XG5cdFx0LyoqIE1pbmltYWwgYXBwZW5kIG1ldGhvZC4gKi9cblx0XHRhcHBlbmQobm9kZTogc3RyaW5nIHwgSU5vZGVMaWtlKTogdm9pZDtcblx0XHRcblx0XHQvKiogTWluaW1hbCBjbGFzc0xpc3Qgb2JqZWN0LiAqL1xuXHRcdHJlYWRvbmx5IGNsYXNzTGlzdDoge1xuXHRcdFx0YWRkKGNsYXNzTmFtZTogc3RyaW5nKTogdm9pZDtcblx0XHRcdHRvU3RyaW5nKCk6IHN0cmluZztcblx0XHR9O1xuXHR9XG5cdFxuXHQvKipcblx0ICogQSB0eXBlIHRoYXQgZGVzY3JpYmVzIHRoZSBzcGVjaWFsIEhUTUxTdHlsZUVsZW1lbnQgdGhhdCBpc1xuXHQgKiByZXR1cm5lZCBmcm9tIHRoZSBob3Quc3R5bGUoKSBtZXRob2Qgd2l0aCB0aGUgSG90SlMtc3BlY2lmaWNcblx0ICogZXhwYW5kbyBtZXRob2QgYWRkZWQuXG5cdCAqL1xuXHRleHBvcnQgdHlwZSBIVE1MSG90U3R5bGVFbGVtZW50ID1cblx0XHRIVE1MU3R5bGVFbGVtZW50ICYgXG5cdFx0e1xuXHRcdFx0LyoqXG5cdFx0XHQgKiBBdHRhY2hlcyB0aGUgPHN0eWxlPiBlbGVtZW50IHRvIHRoZSBzYW1lIHNjb3BlIGFzIHRoZVxuXHRcdFx0ICogc3BlY2lmaWVkIE5vZGUuIFRoaXMgd2lsbCBlaXRoZXIgYmUgYW4gSFRNTCA8aGVhZD4gZWxlbWVudCxcblx0XHRcdCAqIG9yIGEgc2hhZG93IHJvb3QsIGRlcGVuZGluZyBvbiB0aGUgbG9jYXRpb24gb2YgdGhlIHNwZWNpZmllZFxuXHRcdFx0ICogTm9kZS4gSWYgbm8gTm9kZSBpcyBwcm92aWRlZCwgdGhlIDxzdHlsZT4gZWxlbWVudCBpcyBhdHRhY2hlZFxuXHRcdFx0ICogdG8gdGhlIGdsb2JhbCA8aGVhZD4gZWxlbWVudC5cblx0XHRcdCAqL1xuXHRcdFx0YXR0YWNoKG5vZGVXaXRoaW5TY29wZT86IE5vZGUpOiBIVE1MSG90U3R5bGVFbGVtZW50O1xuXHRcdH07XG5cdFxuXHQvKipcblx0ICogQSBjbGFzcyB0aGF0IGRlc2NyaWJlcyB0aGUgbWluaW1hbCBzZXQgb2YgbWVtYmVycyB0aGF0IG5lZWQgdG9cblx0ICogYmUgaW1wbGVtZW50ZWQgb24gZmFrZSBDU1NTdHlsZVNoZWV0IG9iamVjdHMgaW4gb3JkZXIgdG8gY3JlYXRlXG5cdCAqIGEgY3VzdG9tIGhvdC5qcyBjb21wYXRpYmxlIElDU1NTdHlsZVNoZWV0TGlrZS5cblx0ICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgSUNTU1N0eWxlU2hlZXRMaWtlXG5cdHtcblx0XHRpbnNlcnRSdWxlKGluZGV4OiBudW1iZXIpOiBudW1iZXI7XG5cdFx0ZGVsZXRlUnVsZShpbmRleDogbnVtYmVyKTogdm9pZDtcblx0XHRyZWFkb25seSBjc3NSdWxlczoge1xuXHRcdFx0aXRlbShpbmRleDogbnVtYmVyKTogSUNTU1N0eWxlUnVsZUxpa2Vcblx0XHR9XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBBIGNsYXNzIHRoYXQgZGVzY3JpYmVzIHRoZSBtaW5pbWFsIHNldCBvZiBtZW1iZXJzIHRoYXQgbmVlZCB0b1xuXHQgKiBiZSBpbXBsZW1lbnRlZCBvbiBmYWtlIENTU1N0eWxlUnVsZSBvYmplY3RzIGluIG9yZGVyIHRvIGNyZWF0ZVxuXHQgKiBhIGN1c3RvbSBob3QuanMgY29tcGF0aWJsZSBJQ1NTU3R5bGVSdWxlTGlrZS5cblx0ICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgSUNTU1N0eWxlUnVsZUxpa2Vcblx0e1xuXHRcdHJlYWRvbmx5IHN0eWxlOiB7XG5cdFx0XHRzZXRQcm9wZXJ0eShuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIGltcG9ydGFudD86IHN0cmluZyk6IHZvaWQ7XG5cdFx0fVxuXHR9XG5cdFxuXHQvKiogKi9cblx0ZXhwb3J0IHR5cGUgUGFyYW08VCA9IEVsZW1lbnRBdHRyaWJ1dGU+ID1cblx0XHQvLyBTaW5nbGUgY2xhc3MgbmFtZVxuXHRcdHN0cmluZyB8XG5cdFx0Ly8gRXZlbnQgY29ubmVjdGlvbnNcblx0XHRIb3QuRXZlbnQgfFxuXHRcdC8vIEltbWVkaWF0ZWx5IGludm9rZWQgY2xvc3VyZVxuXHRcdEVsZW1lbnRDbG9zdXJlIHxcblx0XHQvLyBBcnJheXMgb2YgUGFyYW1zXG5cdFx0UGFyYW08VD5bXSB8XG5cdFx0Ly8gQ29uZGl0aW9uYWxzXG5cdFx0ZmFsc2UgfCB2b2lkIHwgbnVsbCB8IHVuZGVmaW5lZCB8XG5cdFx0Ly8gRWF0IHByb21pc2VzXG5cdFx0UHJvbWlzZTx2b2lkPiB8XG5cdFx0SU5vZGVMaWtlIHxcblx0XHRTdHlsZSB8XG5cdFx0UGFydGlhbDxUPiB8XG5cdFx0SGF0TGlrZTtcblx0XG5cdC8qKiAqL1xuXHRleHBvcnQgdHlwZSBTaGFkb3dQYXJhbSA9IFxuXHRcdEhvdC5FdmVudCB8XG5cdFx0SG90LlNoYWRvd0Nsb3N1cmUgfFxuXHRcdC8vIENvbmRpdGlvbmFsc1xuXHRcdGZhbHNlIHwgdm9pZCB8IG51bGwgfCB1bmRlZmluZWQgfFxuXHRcdC8vIEFycmF5cyBvZiBQYXJhbXNcblx0XHRTaGFkb3dQYXJhbVtdIHxcblx0XHRQcm9taXNlPHZvaWQ+IHxcblx0XHRJTm9kZUxpa2U7XG5cdFxuXHQvKiogKi9cblx0ZXhwb3J0IGludGVyZmFjZSBFbGVtZW50QXR0cmlidXRlXG5cdHtcblx0XHRuYW1lOiBzdHJpbmc7XG5cdFx0aWQ6IHN0cmluZztcblx0XHRjbGFzczogc3RyaW5nO1xuXHRcdHN0eWxlOiBzdHJpbmc7XG5cdFx0Y29udGVudEVkaXRhYmxlOiBib29sZWFuIHwgc3RyaW5nO1xuXHRcdHNwZWxsY2hlY2s6IGJvb2xlYW47XG5cdFx0dGFiSW5kZXg6IG51bWJlcjtcblx0XHRkYXRhOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuPjtcblx0fVxuXHRcblx0LyoqICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgQmFzZUVsZW1lbnRBdHRyaWJ1dGUgZXh0ZW5kcyBFbGVtZW50QXR0cmlidXRlXG5cdHtcblx0XHRocmVmOiBzdHJpbmc7XG5cdH1cblx0XG5cdC8qKiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIE1ldGFFbGVtZW50QXR0cmlidXRlIGV4dGVuZHMgRWxlbWVudEF0dHJpYnV0ZVxuXHR7XG5cdFx0Y29udGVudDogc3RyaW5nO1xuXHR9XG5cdFxuXHQvKiogKi9cblx0ZXhwb3J0IGludGVyZmFjZSBMaW5rRWxlbWVudEF0dHJpYnV0ZSBleHRlbmRzIEVsZW1lbnRBdHRyaWJ1dGVcblx0e1xuXHRcdHJlbDogc3RyaW5nO1xuXHRcdHR5cGU6IHN0cmluZztcblx0XHRocmVmOiBzdHJpbmc7XG5cdFx0bWVkaWE6IHN0cmluZztcblx0fVxuXHRcblx0LyoqICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgU2NyaXB0RWxlbWVudEF0dHJpYnV0ZSBleHRlbmRzIEVsZW1lbnRBdHRyaWJ1dGVcblx0e1xuXHRcdHR5cGU6IHN0cmluZztcblx0XHRzcmM6IHN0cmluZztcblx0XHRkZWZlcjogYm9vbGVhbjtcblx0fVxuXHRcblx0LyoqICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgRnJhbWVFbGVtZW50QXR0cmlidXRlIGV4dGVuZHMgRWxlbWVudEF0dHJpYnV0ZVxuXHR7XG5cdFx0c3JjOiBzdHJpbmc7XG5cdH1cblx0XG5cdC8qKiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIElucHV0RWxlbWVudEF0dHJpYnV0ZSBleHRlbmRzIEVsZW1lbnRBdHRyaWJ1dGVcblx0e1xuXHRcdHR5cGU6IHN0cmluZztcblx0XHR2YWx1ZTogc3RyaW5nO1xuXHRcdGRpc2FibGVkOiBib29sZWFuO1xuXHRcdHdlYmtpdGRpcmVjdG9yeTogYm9vbGVhbjtcblx0XHRtdWx0aXBsZTogYm9vbGVhbjtcblx0XHRtYXhMZW5ndGg6IG51bWJlcjtcblx0XHRhY2NlcHQ6IHN0cmluZztcblx0XHRhdXRvY2FwaXRhbGl6ZTogYm9vbGVhbjtcblx0XHRhdXRvY29ycmVjdDogYm9vbGVhbjtcblx0XHRhdXRvY29tcGxldGU6IGJvb2xlYW47XG5cdFx0cGxhY2Vob2xkZXI6IHN0cmluZztcblx0fVxuXHRcblx0LyoqICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgVGV4dEFyZWFFbGVtZW50QXR0cmlidXRlIGV4dGVuZHMgRWxlbWVudEF0dHJpYnV0ZVxuXHR7XG5cdFx0dmFsdWU6IHN0cmluZztcblx0XHRkaXNhYmxlZDogYm9vbGVhbjtcblx0XHRwbGFjZWhvbGRlcjogc3RyaW5nO1xuXHRcdGNvbHM6IG51bWJlcjtcblx0XHRyb3dzOiBudW1iZXI7XG5cdH1cblx0XG5cdC8qKiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIEltYWdlRWxlbWVudEF0dHJpYnV0ZSBleHRlbmRzIEVsZW1lbnRBdHRyaWJ1dGVcblx0e1xuXHRcdHNyYzogc3RyaW5nO1xuXHR9XG5cdFxuXHQvKiogKi9cblx0ZXhwb3J0IGludGVyZmFjZSBBbmNob3JFbGVtZW50QXR0cmlidXRlIGV4dGVuZHMgRWxlbWVudEF0dHJpYnV0ZVxuXHR7XG5cdFx0aHJlZjogc3RyaW5nO1xuXHRcdHRhcmdldDogc3RyaW5nO1xuXHR9XG5cdFxuXHQvKiogKi9cblx0ZXhwb3J0IGludGVyZmFjZSBWaWRlb0VsZW1lbnRBdHRyaWJ1dGUgZXh0ZW5kcyBFbGVtZW50QXR0cmlidXRlXG5cdHtcblx0XHRzcmM6IHN0cmluZztcblx0XHR0eXBlOiBzdHJpbmc7XG5cdFx0YXV0b3BsYXk6IGJvb2xlYW47XG5cdFx0bG9vcDogYm9vbGVhbjtcblx0XHRwbGF5c0lubGluZTogYm9vbGVhbjtcblx0XHRjb250cm9sczogYm9vbGVhbjtcblx0XHRtdXRlZDogYm9vbGVhbjtcblx0fVxufVxuXG4vLyMgU3R5bGUgUmVsYXRlZFxuXG5kZWNsYXJlIG5hbWVzcGFjZSBIb3Rcbntcblx0LyoqXG5cdCAqIERlZmluZXMgdGhlIHByZWZpeCB0aGF0IGlzIGFkZGVkIHRvIGFsbCBDU1MgY2xhc3NlcyBnZW5lcmF0ZWRcblx0ICogd2l0aCB0aGUgLmNzcygpIG1ldGhvZC5cblx0ICovXG5cdGV4cG9ydCBjb25zdCBlbnVtIEdlbmVyYXRlZENsYXNzUHJlZml4IHsgdmFsdWUgPSBcIi0taG90LS1cIiB9XG5cdFxuXHQvKiogKi9cblx0ZXhwb3J0IHR5cGUgQ3NzUGFyYW0gPSBzdHJpbmcgfCBIb3QuU3R5bGU7XG5cdFxuXHQvKiogKi9cblx0ZXhwb3J0IHR5cGUgU3R5bGUgPSB7XG5cdFx0W1AgaW4ga2V5b2YgQ1NTU3R5bGVEZWNsYXJhdGlvbl0/OiBQIGV4dGVuZHMga2V5b2YgTnVtZXJpY1N0eWxlRGVjbGFyYXRpb24gPyBcblx0XHRcdE51bWVyaWNTdHlsZURlY2xhcmF0aW9uW1BdIHwgTnVtZXJpY1N0eWxlRGVjbGFyYXRpb25bUF1bXSA6IFxuXHRcdFx0Q1NTU3R5bGVEZWNsYXJhdGlvbltQXSB8IENTU1N0eWxlRGVjbGFyYXRpb25bUF1bXTtcblx0fTtcblx0XG5cdC8qKlxuXHQgKiBcblx0ICovXG5cdGV4cG9ydCB0eXBlIE51bWVyaWNTdHlsZURlY2xhcmF0aW9uID0ge1xuXHRcdGFuaW1hdGlvbkRlbGF5OiBzdHJpbmcgfCAwO1xuXHRcdGFuaW1hdGlvbkR1cmF0aW9uOiBzdHJpbmcgfCAwO1xuXHRcdGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiBzdHJpbmcgfCAwO1xuXHRcdGJhY2tncm91bmRQb3NpdGlvblg6IHN0cmluZyB8IDA7XG5cdFx0YmFja2dyb3VuZFBvc2l0aW9uWTogc3RyaW5nIHwgMDtcblx0XHRibG9ja1NpemU6IHN0cmluZyB8IDA7XG5cdFx0Ym9yZGVyOiBzdHJpbmcgfCAwO1xuXHRcdGJvcmRlckJsb2NrOiBzdHJpbmcgfCAwO1xuXHRcdGJvcmRlckJsb2NrRW5kOiBzdHJpbmcgfCAwO1xuXHRcdGJvcmRlckJsb2NrRW5kV2lkdGg6IHN0cmluZyB8IDA7XG5cdFx0Ym9yZGVyQmxvY2tTdGFydDogc3RyaW5nIHwgMDtcblx0XHRib3JkZXJCbG9ja1N0YXJ0V2lkdGg6IHN0cmluZyB8IDA7XG5cdFx0Ym9yZGVyQmxvY2tXaWR0aDogc3RyaW5nIHwgMDtcblx0XHRib3JkZXJCb3R0b206IHN0cmluZyB8IDA7XG5cdFx0Ym9yZGVyQm90dG9tTGVmdFJhZGl1czogc3RyaW5nIHwgMDtcblx0XHRib3JkZXJCb3R0b21SaWdodFJhZGl1czogc3RyaW5nIHwgMDtcblx0XHRib3JkZXJCb3R0b21XaWR0aDogc3RyaW5nIHwgMDtcblx0XHRib3JkZXJFbmRFbmRSYWRpdXM6IHN0cmluZyB8IDA7XG5cdFx0Ym9yZGVyRW5kU3RhcnRSYWRpdXM6IHN0cmluZyB8IDA7XG5cdFx0Ym9yZGVySW5saW5lOiBzdHJpbmcgfCAwO1xuXHRcdGJvcmRlcklubGluZUVuZDogc3RyaW5nIHwgMDtcblx0XHRib3JkZXJJbmxpbmVFbmRXaWR0aDogc3RyaW5nIHwgMDtcblx0XHRib3JkZXJJbmxpbmVTdGFydDogc3RyaW5nIHwgMDtcblx0XHRib3JkZXJJbmxpbmVTdGFydFdpZHRoOiBzdHJpbmcgfCAwO1xuXHRcdGJvcmRlcklubGluZVdpZHRoOiBzdHJpbmcgfCAwO1xuXHRcdGJvcmRlckxlZnQ6IHN0cmluZyB8IDA7XG5cdFx0Ym9yZGVyTGVmdFdpZHRoOiBzdHJpbmcgfCAwO1xuXHRcdGJvcmRlclJhZGl1czogc3RyaW5nIHwgMDtcblx0XHRib3JkZXJSaWdodDogc3RyaW5nIHwgMDtcblx0XHRib3JkZXJSaWdodFdpZHRoOiBzdHJpbmcgfCAwO1xuXHRcdGJvcmRlclNwYWNpbmc6IHN0cmluZyB8IDA7XG5cdFx0Ym9yZGVyU3RhcnRFbmRSYWRpdXM6IHN0cmluZyB8IDA7XG5cdFx0Ym9yZGVyU3RhcnRTdGFydFJhZGl1czogc3RyaW5nIHwgMDtcblx0XHRib3JkZXJUb3A6IHN0cmluZyB8IDA7XG5cdFx0Ym9yZGVyVG9wTGVmdFJhZGl1czogc3RyaW5nIHwgMDtcblx0XHRib3JkZXJUb3BSaWdodFJhZGl1czogc3RyaW5nIHwgMDtcblx0XHRib3JkZXJUb3BXaWR0aDogc3RyaW5nIHwgMDtcblx0XHRib3JkZXJXaWR0aDogc3RyaW5nIHwgMDtcblx0XHRib3R0b206IHN0cmluZyB8IDA7XG5cdFx0Y29sdW1uQ291bnQ6IHN0cmluZyB8IG51bWJlcjtcblx0XHRjb2x1bW5HYXA6IHN0cmluZyB8IDA7XG5cdFx0Y29sdW1uUnVsZVdpZHRoOiBzdHJpbmcgfCAwO1xuXHRcdGNvbHVtblNwYW46IHN0cmluZyB8IDA7XG5cdFx0Y29sdW1uV2lkdGg6IHN0cmluZyB8IDA7XG5cdFx0Y29sdW1uczogc3RyaW5nIHwgbnVtYmVyO1xuXHRcdGZsZXhHcm93OiBzdHJpbmcgfCBudW1iZXI7XG5cdFx0ZmxleFNocmluazogc3RyaW5nIHwgbnVtYmVyO1xuXHRcdGZvbnRTaXplOiBzdHJpbmcgfCAwO1xuXHRcdGZvbnRTaXplQWRqdXN0OiBzdHJpbmcgfCAwO1xuXHRcdGZvbnRXZWlnaHQ6IHN0cmluZyB8IG51bWJlcjtcblx0XHRncmlkQXV0b0NvbHVtbnM6IHN0cmluZyB8IDA7XG5cdFx0Z3JpZENvbHVtbjogc3RyaW5nIHwgbnVtYmVyO1xuXHRcdGdyaWRDb2x1bW5FbmQ6IHN0cmluZyB8IG51bWJlcjtcblx0XHRncmlkQ29sdW1uR2FwOiBzdHJpbmcgfCAwO1xuXHRcdGdyaWRDb2x1bW5TdGFydDogc3RyaW5nIHwgbnVtYmVyO1xuXHRcdGdyaWRSb3c6IHN0cmluZyB8IG51bWJlcjtcblx0XHRncmlkUm93RW5kOiBzdHJpbmcgfCBudW1iZXI7XG5cdFx0Z3JpZFJvd1N0YXJ0OiBzdHJpbmcgfCBudW1iZXI7XG5cdFx0Z3JpZFRlbXBsYXRlOiBzdHJpbmcgfCAwO1xuXHRcdGdyaWRUZW1wbGF0ZUFyZWFzOiBzdHJpbmcgfCAwO1xuXHRcdGdyaWRUZW1wbGF0ZUNvbHVtbnM6IHN0cmluZyB8IDA7XG5cdFx0Z3JpZFRlbXBsYXRlUm93czogc3RyaW5nIHwgMDtcblx0XHRoZWlnaHQ6IHN0cmluZyB8IG51bWJlcjtcblx0XHRpbmxpbmVTaXplOiBzdHJpbmcgfCAwO1xuXHRcdGluc2V0OiBzdHJpbmcgfCAwO1xuXHRcdGluc2V0QmxvY2s6IHN0cmluZyB8IDA7XG5cdFx0aW5zZXRCbG9ja0VuZDogc3RyaW5nIHwgMDtcblx0XHRpbnNldEJsb2NrU3RhcnQ6IHN0cmluZyB8IDA7XG5cdFx0aW5zZXRJbmxpbmU6IHN0cmluZyB8IDA7XG5cdFx0aW5zZXRJbmxpbmVFbmQ6IHN0cmluZyB8IDA7XG5cdFx0aW5zZXRJbmxpbmVTdGFydDogc3RyaW5nIHwgMDtcblx0XHRsZWZ0OiBzdHJpbmcgfCAwO1xuXHRcdGxldHRlclNwYWNpbmc6IHN0cmluZyB8IDA7XG5cdFx0bGluZUhlaWdodDogc3RyaW5nIHwgbnVtYmVyO1xuXHRcdG1hcmdpbjogc3RyaW5nIHwgMDtcblx0XHRtYXJnaW5CbG9jazogc3RyaW5nIHwgMDtcblx0XHRtYXJnaW5CbG9ja0VuZDogc3RyaW5nIHwgMDtcblx0XHRtYXJnaW5CbG9ja1N0YXJ0OiBzdHJpbmcgfCAwO1xuXHRcdG1hcmdpbkJvdHRvbTogc3RyaW5nIHwgMDtcblx0XHRtYXJnaW5JbmxpbmU6IHN0cmluZyB8IDA7XG5cdFx0bWFyZ2luSW5saW5lRW5kOiBzdHJpbmcgfCAwO1xuXHRcdG1hcmdpbklubGluZVN0YXJ0OiBzdHJpbmcgfCAwO1xuXHRcdG1hcmdpbkxlZnQ6IHN0cmluZyB8IDA7XG5cdFx0bWFyZ2luUmlnaHQ6IHN0cmluZyB8IDA7XG5cdFx0bWFyZ2luVG9wOiBzdHJpbmcgfCAwO1xuXHRcdG1heEJsb2NrU2l6ZTogc3RyaW5nIHwgMDtcblx0XHRtYXhIZWlnaHQ6IHN0cmluZyB8IDA7XG5cdFx0bWF4SW5saW5lU2l6ZTogc3RyaW5nIHwgMDtcblx0XHRtYXhXaWR0aDogc3RyaW5nIHwgMDtcblx0XHRtaW5CbG9ja1NpemU6IHN0cmluZyB8IDA7XG5cdFx0bWluSGVpZ2h0OiBzdHJpbmcgfCAwO1xuXHRcdG1pbklubGluZVNpemU6IHN0cmluZyB8IDA7XG5cdFx0bWluV2lkdGg6IHN0cmluZyB8IDA7XG5cdFx0b2Zmc2V0OiBzdHJpbmcgfCAwO1xuXHRcdG9mZnNldERpc3RhbmNlOiBzdHJpbmcgfCAwO1xuXHRcdG9mZnNldFBhdGg6IHN0cmluZyB8IDA7XG5cdFx0b2Zmc2V0Um90YXRlOiBzdHJpbmcgfCAwO1xuXHRcdG9wYWNpdHk6IHN0cmluZyB8IG51bWJlcjtcblx0XHRvcmRlcjogc3RyaW5nIHwgbnVtYmVyO1xuXHRcdG91dGxpbmU6IHN0cmluZyB8IDA7XG5cdFx0b3V0bGluZU9mZnNldDogc3RyaW5nIHwgMDtcblx0XHRvdXRsaW5lV2lkdGg6IHN0cmluZyB8IDA7XG5cdFx0cGFkZGluZzogc3RyaW5nIHwgMDtcblx0XHRwYWRkaW5nQmxvY2s6IHN0cmluZyB8IDA7XG5cdFx0cGFkZGluZ0Jsb2NrRW5kOiBzdHJpbmcgfCAwO1xuXHRcdHBhZGRpbmdCbG9ja1N0YXJ0OiBzdHJpbmcgfCAwO1xuXHRcdHBhZGRpbmdCb3R0b206IHN0cmluZyB8IDA7XG5cdFx0cGFkZGluZ0lubGluZTogc3RyaW5nIHwgMDtcblx0XHRwYWRkaW5nSW5saW5lRW5kOiBzdHJpbmcgfCAwO1xuXHRcdHBhZGRpbmdJbmxpbmVTdGFydDogc3RyaW5nIHwgMDtcblx0XHRwYWRkaW5nTGVmdDogc3RyaW5nIHwgMDtcblx0XHRwYWRkaW5nUmlnaHQ6IHN0cmluZyB8IDA7XG5cdFx0cGFkZGluZ1RvcDogc3RyaW5nIHwgMDtcblx0XHRwYWludE9yZGVyOiBzdHJpbmcgfCAwO1xuXHRcdHJpZ2h0OiBzdHJpbmcgfCAwO1xuXHRcdHJvd0dhcDogc3RyaW5nIHwgMDtcblx0XHRzY2FsZTogc3RyaW5nIHwgMDtcblx0XHRzY3JvbGxNYXJnaW46IHN0cmluZyB8IDA7XG5cdFx0c2Nyb2xsTWFyZ2luQmxvY2s6IHN0cmluZyB8IDA7XG5cdFx0c2Nyb2xsTWFyZ2luQmxvY2tFbmQ6IHN0cmluZyB8IDA7XG5cdFx0c2Nyb2xsTWFyZ2luQmxvY2tTdGFydDogc3RyaW5nIHwgMDtcblx0XHRzY3JvbGxNYXJnaW5Cb3R0b206IHN0cmluZyB8IDA7XG5cdFx0c2Nyb2xsTWFyZ2luSW5saW5lOiBzdHJpbmcgfCAwO1xuXHRcdHNjcm9sbE1hcmdpbklubGluZUVuZDogc3RyaW5nIHwgMDtcblx0XHRzY3JvbGxNYXJnaW5JbmxpbmVTdGFydDogc3RyaW5nIHwgMDtcblx0XHRzY3JvbGxNYXJnaW5MZWZ0OiBzdHJpbmcgfCAwO1xuXHRcdHNjcm9sbE1hcmdpblJpZ2h0OiBzdHJpbmcgfCAwO1xuXHRcdHNjcm9sbE1hcmdpblRvcDogc3RyaW5nIHwgMDtcblx0XHRzY3JvbGxQYWRkaW5nOiBzdHJpbmcgfCAwO1xuXHRcdHNjcm9sbFBhZGRpbmdCbG9jazogc3RyaW5nIHwgMDtcblx0XHRzY3JvbGxQYWRkaW5nQmxvY2tFbmQ6IHN0cmluZyB8IDA7XG5cdFx0c2Nyb2xsUGFkZGluZ0Jsb2NrU3RhcnQ6IHN0cmluZyB8IDA7XG5cdFx0c2Nyb2xsUGFkZGluZ0JvdHRvbTogc3RyaW5nIHwgMDtcblx0XHRzY3JvbGxQYWRkaW5nSW5saW5lOiBzdHJpbmcgfCAwO1xuXHRcdHNjcm9sbFBhZGRpbmdJbmxpbmVFbmQ6IHN0cmluZyB8IDA7XG5cdFx0c2Nyb2xsUGFkZGluZ0lubGluZVN0YXJ0OiBzdHJpbmcgfCAwO1xuXHRcdHNjcm9sbFBhZGRpbmdMZWZ0OiBzdHJpbmcgfCAwO1xuXHRcdHNjcm9sbFBhZGRpbmdSaWdodDogc3RyaW5nIHwgMDtcblx0XHRzY3JvbGxQYWRkaW5nVG9wOiBzdHJpbmcgfCAwO1xuXHRcdHRhYlNpemU6IHN0cmluZyB8IDA7XG5cdFx0dGV4dEluZGVudDogc3RyaW5nIHwgMDtcblx0XHR0b3A6IHN0cmluZyB8IDA7XG5cdFx0dHJhbnNpdGlvbkRlbGF5OiBzdHJpbmcgfCAwO1xuXHRcdHRyYW5zaXRpb25EdXJhdGlvbjogc3RyaW5nIHwgMDtcblx0XHR3aWR0aDogc3RyaW5nIHwgbnVtYmVyO1xuXHRcdHdvcmRTcGFjaW5nOiBzdHJpbmcgfCAwO1xuXHRcdHpJbmRleDogc3RyaW5nIHwgbnVtYmVyO1xuXHR9O1xufVxuXG4vLyMgRXZlbnQgUmVsYXRlZFxuXG5kZWNsYXJlIG5hbWVzcGFjZSBIb3Rcbntcblx0LyoqICovXG5cdGV4cG9ydCB0eXBlIEV2ZW50ID0gSW5zdGFuY2VUeXBlPHR5cGVvZiBIb3QuRXZlbnQ+O1xuXHRcblx0LyoqICovXG5cdGV4cG9ydCBpbnRlcmZhY2UgRXZlbnRNYXAgZXh0ZW5kcyBIVE1MRWxlbWVudEV2ZW50TWFwXG5cdHtcblx0XHRcImlucHV0XCI6IElucHV0RXZlbnQ7XG5cdH1cblx0XG5cdC8qKiAqL1xuXHRleHBvcnQgaW50ZXJmYWNlIEV4dGVuZGVkRXZlbnRNYXAgZXh0ZW5kcyBFdmVudE1hcFxuXHR7XG5cdFx0XCJjb25uZWN0ZWRcIjogRXZlbnQ7XG5cdFx0XCJkaXNjb25uZWN0ZWRcIjogRXZlbnQ7XG5cdFx0XCJyZW5kZXJlZFwiOiBFdmVudDtcblx0fVxufVxuXG4vKipcbiAqIEFkZHMgdGhlIENTUyBwcm9wZXJ0aWVzIHRoYXQgYXJlIG1pc3NpbmcgZnJvbSB0aGUgc3RhbmRhcmQgc2V0XG4gKiBvZiB0eXBlIGRlZmluaXRpb25zLiBBbnkgb2YgdGhlc2UgZW50cmllcyBzaG91bGQgYmUgcmVtb3ZlZCBpZlxuICogb3Igd2hlbiB0aGUgZGVmaW5pdGlvbiBpcyBhZGRlZCB1cHN0cmVhbS5cbiAqL1xuaW50ZXJmYWNlIENTU1N0eWxlRGVjbGFyYXRpb25cbntcblx0YmFja2Ryb3BGaWx0ZXI6IHN0cmluZztcblx0Y29udGFpbmVyOiBzdHJpbmc7XG5cdGNvbnRhaW5lclR5cGU6IHN0cmluZztcblx0Y29udGFpbmVyTmFtZTogc3RyaW5nO1xuXHRjb250ZW50VmlzaWJpbGl0eTogc3RyaW5nO1xuXHR3ZWJraXRBcHBSZWdpb246IHN0cmluZztcblx0d2Via2l0QmFja2Ryb3BGaWx0ZXI6IHN0cmluZztcblx0d2Via2l0Qm9yZGVyQWZ0ZXI6IHN0cmluZztcblx0d2Via2l0Qm9yZGVyQWZ0ZXJDb2xvcjogc3RyaW5nO1xuXHR3ZWJraXRCb3JkZXJBZnRlclN0eWxlOiBzdHJpbmc7XG5cdHdlYmtpdEJvcmRlckFmdGVyV2lkdGg6IHN0cmluZztcblx0d2Via2l0Qm9yZGVyQmVmb3JlOiBzdHJpbmc7XG5cdHdlYmtpdEJvcmRlckJlZm9yZUNvbG9yOiBzdHJpbmc7XG5cdHdlYmtpdEJvcmRlckJlZm9yZVN0eWxlOiBzdHJpbmc7XG5cdHdlYmtpdEJvcmRlckJlZm9yZVdpZHRoOiBzdHJpbmc7XG5cdHdlYmtpdEJvcmRlckVuZDogc3RyaW5nO1xuXHR3ZWJraXRCb3JkZXJFbmRDb2xvcjogc3RyaW5nO1xuXHR3ZWJraXRCb3JkZXJFbmRTdHlsZTogc3RyaW5nO1xuXHR3ZWJraXRCb3JkZXJFbmRXaWR0aDogc3RyaW5nO1xuXHR3ZWJraXRCb3JkZXJIb3Jpem9udGFsU3BhY2luZzogc3RyaW5nO1xuXHR3ZWJraXRCb3JkZXJTdGFydDogc3RyaW5nO1xuXHR3ZWJraXRCb3JkZXJTdGFydENvbG9yOiBzdHJpbmc7XG5cdHdlYmtpdEJvcmRlclN0YXJ0U3R5bGU6IHN0cmluZztcblx0d2Via2l0Qm9yZGVyU3RhcnRXaWR0aDogc3RyaW5nO1xuXHR3ZWJraXRCb3JkZXJUb3BMZWZ0UmFkaXVzOiBzdHJpbmc7XG5cdHdlYmtpdEJvcmRlclRvcFJpZ2h0UmFkaXVzOiBzdHJpbmc7XG5cdHdlYmtpdEJvcmRlclZlcnRpY2FsU3BhY2luZzogc3RyaW5nO1xuXHR3ZWJraXRCb3hEZWNvcmF0aW9uQnJlYWs6IHN0cmluZztcblx0d2Via2l0Qm94RGlyZWN0aW9uOiBzdHJpbmc7XG5cdHdlYmtpdEJveEZsZXg6IHN0cmluZztcblx0d2Via2l0Qm94T3JkaW5hbEdyb3VwOiBzdHJpbmc7XG5cdHdlYmtpdEJveE9yaWVudDogc3RyaW5nO1xuXHR3ZWJraXRCb3hQYWNrOiBzdHJpbmc7XG5cdHdlYmtpdEJveFJlZmxlY3Q6IHN0cmluZztcblx0d2Via2l0Qm94U2hhZG93OiBzdHJpbmc7XG5cdHdlYmtpdEJveFNpemluZzogc3RyaW5nO1xuXHR3ZWJraXRDbGlwUGF0aDogc3RyaW5nO1xuXHR3ZWJraXRDb2x1bW5CcmVha0FmdGVyOiBzdHJpbmc7XG5cdHdlYmtpdENvbHVtbkJyZWFrQmVmb3JlOiBzdHJpbmc7XG5cdHdlYmtpdENvbHVtbkJyZWFrSW5zaWRlOiBzdHJpbmc7XG5cdHdlYmtpdENvbHVtbkNvdW50OiBzdHJpbmc7XG5cdHdlYmtpdENvbHVtbkdhcDogc3RyaW5nO1xuXHR3ZWJraXRDb2x1bW5SdWxlOiBzdHJpbmc7XG5cdHdlYmtpdENvbHVtblJ1bGVDb2xvcjogc3RyaW5nO1xuXHR3ZWJraXRDb2x1bW5SdWxlU3R5bGU6IHN0cmluZztcblx0d2Via2l0Q29sdW1uUnVsZVdpZHRoOiBzdHJpbmc7XG5cdHdlYmtpdENvbHVtblNwYW46IHN0cmluZztcblx0d2Via2l0Q29sdW1uV2lkdGg6IHN0cmluZztcblx0d2Via2l0Q29sdW1uczogc3RyaW5nIHwgbnVtYmVyO1xuXHR3ZWJraXRGb250RmVhdHVyZVNldHRpbmdzOiBzdHJpbmc7XG5cdHdlYmtpdEZvbnRTbW9vdGhpbmc6IHN0cmluZztcblx0d2Via2l0SGlnaGxpZ2h0OiBzdHJpbmc7XG5cdHdlYmtpdEh5cGhlbmF0ZUNoYXJhY3Rlcjogc3RyaW5nO1xuXHR3ZWJraXRMaW5lQnJlYWs6IHN0cmluZztcblx0d2Via2l0TGluZUNsYW1wOiBzdHJpbmc7XG5cdHdlYmtpdExvY2FsZTogc3RyaW5nO1xuXHR3ZWJraXRMb2dpY2FsSGVpZ2h0OiBzdHJpbmc7XG5cdHdlYmtpdExvZ2ljYWxXaWR0aDogc3RyaW5nO1xuXHR3ZWJraXRNYXJnaW5BZnRlcjogc3RyaW5nIHwgMDtcblx0d2Via2l0TWFyZ2luQmVmb3JlOiBzdHJpbmcgfCAwO1xuXHR3ZWJraXRNYXJnaW5FbmQ6IHN0cmluZyB8IDA7XG5cdHdlYmtpdE1hcmdpblN0YXJ0OiBzdHJpbmcgfCAwO1xuXHR3ZWJraXRNYXNrQ29tcG9zaXRlOiBzdHJpbmc7XG5cdHdlYmtpdE1heExvZ2ljYWxIZWlnaHQ6IHN0cmluZztcblx0d2Via2l0TWF4TG9naWNhbFdpZHRoOiBzdHJpbmc7XG5cdHdlYmtpdE1pbkxvZ2ljYWxIZWlnaHQ6IHN0cmluZztcblx0d2Via2l0TWluTG9naWNhbFdpZHRoOiBzdHJpbmc7XG5cdHdlYmtpdE9wYWNpdHk6IHN0cmluZyB8IG51bWJlcjtcblx0d2Via2l0UGFkZGluZ0FmdGVyOiBzdHJpbmc7XG5cdHdlYmtpdFBhZGRpbmdCZWZvcmU6IHN0cmluZztcblx0d2Via2l0UGFkZGluZ0VuZDogc3RyaW5nO1xuXHR3ZWJraXRQYWRkaW5nU3RhcnQ6IHN0cmluZztcblx0d2Via2l0UGVyc3BlY3RpdmVPcmlnaW5YOiBzdHJpbmc7XG5cdHdlYmtpdFBlcnNwZWN0aXZlT3JpZ2luWTogc3RyaW5nO1xuXHR3ZWJraXRQcmludENvbG9yQWRqdXN0OiBzdHJpbmc7XG5cdHdlYmtpdFJ0bE9yZGVyaW5nOiBzdHJpbmc7XG5cdHdlYmtpdFJ1YnlQb3NpdGlvbjogc3RyaW5nO1xuXHR3ZWJraXRTaGFwZUltYWdlVGhyZXNob2xkOiBzdHJpbmc7XG5cdHdlYmtpdFNoYXBlTWFyZ2luOiBzdHJpbmc7XG5cdHdlYmtpdFNoYXBlT3V0c2lkZTogc3RyaW5nO1xuXHR3ZWJraXRUYXBIaWdobGlnaHRDb2xvcjogc3RyaW5nO1xuXHR3ZWJraXRUZXh0Q29tYmluZTogc3RyaW5nO1xuXHR3ZWJraXRUZXh0RGVjb3JhdGlvbnNJbkVmZmVjdDogc3RyaW5nO1xuXHR3ZWJraXRUZXh0RW1waGFzaXM6IHN0cmluZztcblx0d2Via2l0VGV4dEVtcGhhc2lzQ29sb3I6IHN0cmluZztcblx0d2Via2l0VGV4dEVtcGhhc2lzUG9zaXRpb246IHN0cmluZztcblx0d2Via2l0VGV4dEVtcGhhc2lzU3R5bGU6IHN0cmluZztcblx0d2Via2l0VGV4dEZpbGxDb2xvcjogc3RyaW5nO1xuXHR3ZWJraXRUZXh0T3JpZW50YXRpb246IHN0cmluZztcblx0d2Via2l0VGV4dFNlY3VyaXR5OiBzdHJpbmc7XG5cdHdlYmtpdFRleHRTdHJva2U6IHN0cmluZztcblx0d2Via2l0VGV4dFN0cm9rZUNvbG9yOiBzdHJpbmc7XG5cdHdlYmtpdFRleHRTdHJva2VXaWR0aDogc3RyaW5nO1xuXHR3ZWJraXRVc2VyRHJhZzogc3RyaW5nO1xuXHR3ZWJraXRVc2VyTW9kaWZ5OiBzdHJpbmc7XG5cdHdlYmtpdFdyaXRpbmdNb2RlOiBzdHJpbmc7XG5cdHNjcm9sbGJhcldpZHRoOiBzdHJpbmc7XG5cdG1zT3ZlcmZsb3dTdHlsZTogc3RyaW5nO1xufVxuXG4vL0B0cy1pZ25vcmVcbmlmICh0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiKSBPYmplY3QuYXNzaWduKG1vZHVsZS5leHBvcnRzLCB7IEhvdDogSG90IH0pO1xuXG4vLyBFUyBNb2R1bGUgY29tcGF0aWJpbGl0eVxuZGVjbGFyZSBtb2R1bGUgXCJob3Rqc1wiIHsgZXhwb3J0ID0gSG90OyB9XG4iXX0=